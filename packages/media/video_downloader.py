from __future__ import annotations

import asyncio
import logging
import os
import random
import re
import socket
import time
from pathlib import Path
from typing import Tuple
from urllib.error import HTTPError, URLError

import yt_dlp
from instaloader import Instaloader, Post
from yt_dlp.utils import DownloadError, ExtractorError

VIDEO_FOLDER = 'videos/'
WIDTH_VIDEO = 720  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
HEIGHT_VIDEO = 1280  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
INACTIVITY_LIMIT_SECONDS = 15 * 60  # 15 –º–∏–Ω—É—Ç

logger = logging.getLogger(__name__)


def _ensure_dir(path: str) -> None:
    if not os.path.exists(path):
        os.makedirs(path, exist_ok=True)
        logger.debug(f'üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞: {path}')


def _finalize_path(raw_path: str, prefer_ext: str | None = 'mp4') -> str:
    """yt_dlp.prepare_filename(info) –¥–∞—ë—Ç –ø—É—Ç—å –¥–æ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ï—Å–ª–∏ –º—ã –º–µ—Ä–¥–∂–∏–º –≤ mp4, —É–¥–æ–±–Ω–µ–µ –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å .mp4.
    """
    if not prefer_ext:
        return raw_path
    base, _ = os.path.splitext(raw_path)
    return f'{base}.{prefer_ext}'


def _platform_from_url(url: str) -> str:
    u = url.lower()
    if "instagram.com" in u:
        return "instagram"
    if "tiktok.com" in u:
        return "tiktok"
    if "youtube.com" in u or "youtu.be" in u:
        return "youtube"
    return "unknown"


def _random_human_sleep(min_s: float, max_s: float) -> None:
    time.sleep(random.uniform(min_s, max_s))


def _yt_dlp_opts(output_path: str) -> dict:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å ¬´—á–µ–ª–æ–≤–µ—á–Ω—ã–º¬ª –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º:
    - sleep_interval: –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏/—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏
    - retries/fragment_retries: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Ç—Ä–∞–∏
    - ratelimit: –º—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    - noprogress/quiet: —Ç–∏—à–µ –≤ stdout
    """
    return {
        "outtmpl": output_path,
        "format": "bv+ba/best/best",
        "merge_output_format": "mp4",
        "postprocessors": [
            {"key": "FFmpegVideoConvertor", "preferedformat": "mp4"}
        ],
        "noprogress": True,
        "quiet": True,
        "nocheckcertificate": True,
        "retries": 3,
        "fragment_retries": 3,
        "sleep_interval": 1.0,
        "max_sleep_interval": 3.0,
        "ratelimit": 2_000_000,  # ~2 MB/s
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 1 –≤ yt-dlp)
        # "concurrent_fragment_downloads": 1,
        # –ß—É—Ç—å –±–æ–ª–µ–µ ¬´–æ–±—ã—á–Ω—ã–π¬ª User-Agent (yt-dlp —Å–∞–º —Å—Ç–∞–≤–∏—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UA)
        # "http_headers": {"User-Agent": "..."},
    }


def _is_instagram_login_or_rate_error(err: Exception) -> bool:
    """
    –≠–≤—Ä–∏—Å—Ç–∏–∫–∏: –∫–æ–≥–¥–∞ —É Instagram —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω / —Å–ª–æ–≤–∏–ª–∏ 403/429, –ª–∏–±–æ
    –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∏–∑-–∑–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    s = str(err).lower()
    patterns = [
        "http error 403",
        "http error 429",
        "forbidden",
        "too many requests",
        "login required",
        "private video",
        "this video is only available for registered users",
        "please log in",
        "not logged in",
    ]
    return any(p in s for p in patterns)


def _should_retry(err: Exception) -> bool:
    """
    –†–µ—à–∞–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É yt-dlp.
    –°–µ—Ç–µ–≤—ã–µ/–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –¥–∞. –¢—è–∂—ë–ª—ã–µ –æ—à–∏–±–∫–∏ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —É–¥–∞–ª–µ–Ω–æ) ‚Äî –Ω–µ—Ç.
    """
    s = str(err).lower()

    # –°–µ—Ç–µ–≤—ã–µ/–≤—Ä–µ–º–µ–Ω–Ω—ã–µ
    transient_hints = [
        "timed out",
        "timeout",
        "temporary failure",
        "server error",
        "503 service unavailable",
        "connection reset",
        "network is unreachable",
        "incomplete fragment",
        "http error 5",  # 5xx
    ]
    if any(h in s for h in transient_hints):
        return True

    # OAuth/DRM/–≥–µ–æ/—É–¥–∞–ª–µ–Ω–æ ‚Äî –ø–æ–≤—Ç–æ—Ä –æ–±—ã—á–Ω–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç
    terminal_hints = [
        "copyright",
        "dmca",
        "drm",
        "geo restricted",
        "geo-restricted",
        "unavailable",
        "video has been removed",
        "video unavailable",
        "private video",
        "sign in to confirm your age",
        "age-restricted",
    ]
    if any(h in s for h in terminal_hints):
        return False

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 –ø–æ–≤—Ç–æ—Ä –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ
    return True


def _extract_description_from_info(info: dict) -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: description, title, caption.
    """
    cand = (
        info.get("description")
        or info.get("fulltitle")
        or info.get("title")
        or info.get("caption")
        or ""
    )
    if not cand and "entries" in info and isinstance(info["entries"], list):
        # –ü–ª–µ–π–ª–∏—Å—Ç—ã/–º—É–ª—å—Ç–∏-–≤–∏–¥–µ–æ
        for it in info["entries"]:
            cand = (
                (it or {}).get("description")
                or (it or {}).get("title")
                or (it or {}).get("caption")
                or ""
            )
            if cand:
                break
    return cand or ""


def _try_download_with_yt_dlp(url: str) -> Tuple[str, str]:
    """
    –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ yt-dlp. –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    """
    output_path = os.path.join(VIDEO_FOLDER, "%(id)s.%(ext)s")
    ydl_opts = _yt_dlp_opts(output_path)

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)  # –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å
        raw_path = ydl.prepare_filename(info)
        file_path = _finalize_path(raw_path, prefer_ext="mp4")
        desc = _extract_description_from_info(info)
        logger.debug("‚úÖ yt-dlp —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª: %s", file_path)
        return file_path, desc


def _instagram_shortcode_from_url(url: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode –∏–∑ —Å—Å—ã–ª–æ–∫ Instagram:
    - .../reel/<shortcode>/
    - .../p/<shortcode>/
    - .../share/<shortcode>/
    """
    m = re.search(r"/(?:reel|p|share)/([A-Za-z0-9_-]{5,})", url)
    return m.group(1) if m else None


def _download_with_instaloader(url: str) -> Tuple[str, str]:
    """
    –§–æ–ª–±—ç–∫ –¥–ª—è Instagram —á–µ—Ä–µ–∑ instaloader==4.14.2.
    –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞/—Ä–∏–ª–∞ –ø–æ shortcode, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∏ –ø–æ–¥–ø–∏—Å—å.
    """
    if Instaloader is None or Post is None:
        raise RuntimeError(
            "instaloader –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ instaloader –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞."
        )

    shortcode = _instagram_shortcode_from_url(url)
    if not shortcode:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Instagram shortcode –∏–∑ URL.")

    _ensure_dir(VIDEO_FOLDER)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞, –±–µ–∑ –¥–æ–ø. —Ñ–∞–π–ª–æ–≤ –∏ –∞–ª—å–±–æ–º–æ–≤
    L = Instaloader(
        dirname_pattern=VIDEO_FOLDER.rstrip("/"),
        filename_pattern="{shortcode}",
        download_pictures=False,
        download_videos=True,
        download_video_thumbnails=False,
        save_metadata=False,
        compress_json=False,
        post_metadata_txt_pattern="",
        max_connection_attempts=3,
        quiet=True,
    )

    # ¬´–ß–µ–ª–æ–≤–µ—á–Ω—ã–µ¬ª –ø–∞—É–∑—ã
    _random_human_sleep(0.8, 2.2)

    post = Post.from_shortcode(L.context, shortcode)
    caption = post.caption or ""

    # –°–∫–∞—á–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –ø–æ—Å—Ç (–µ—Å–ª–∏ –∫–∞—Ä—É—Å–µ–ª—å ‚Äî instaloader –º–æ–∂–µ—Ç –∫–∞—á–∞—Ç—å
    # –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ Reels ‚Äî –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ)
    L.download_post(post, target=".")

    # Instaloader —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ {shortcode}.mp4 –≤ VIDEO_FOLDER
    candidate = Path(VIDEO_FOLDER) / f"{shortcode}.mp4"
    if not candidate.exists():
        # –≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è; –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π .mp4 —Å shortcode
        for p in Path(VIDEO_FOLDER).glob(f"{shortcode}*.mp4"):
            candidate = p
            break

    if not candidate.exists():
        raise FileNotFoundError(
            "Instaloader –Ω–µ —Å–æ–∑–¥–∞–ª –≤–∏–¥–µ–æ—Ñ–∞–π–ª –æ–∂–∏–¥–µ–º–æ–≥–æ –∏–º–µ–Ω–∏."
        )

    logger.debug("‚úÖ instaloader —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª: %s", candidate)
    return str(candidate), caption


def download_video_and_description(url: str) -> Tuple[str, str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (path, description).
    1) yt-dlp —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ ¬´—á–µ–ª–æ–≤–µ—á–Ω—ã–º–∏¬ª –ø–∞—É–∑–∞–º–∏
    2) –ü—Ä–∏ Instagram-–æ—à–∏–±–∫–∞—Ö —Ç–∏–ø–∞ 403/429/login ‚Äî —Ñ–æ–ª–±—ç–∫ –Ω–∞ instaloader
    (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞)
    """
    _ensure_dir(VIDEO_FOLDER)
    platform = _platform_from_url(url)

    max_attempts = 3
    base_sleep = 1.0  # —Å–µ–∫; –±—É–¥–µ—Ç –Ω–∞—Ä–∞—Å—Ç–∞—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
    last_exc: Exception | None = None

    for attempt in range(1, max_attempts + 1):
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            _random_human_sleep(0.6, 1.8)
            return _try_download_with_yt_dlp(url)
        except (DownloadError, ExtractorError) as e:
            last_exc = e
            logger.warning(
                "yt-dlp –æ—à–∏–±–∫–∞ (%d/%d): %s", attempt, max_attempts, e
            )

            # –ï—Å–ª–∏ —ç—Ç–æ Instagram-–æ—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞/—Ä–µ–π—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ instaloader
            if platform == "instagram" and _is_instagram_login_or_rate_error(
                e
            ):
                logger.info(
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ instaloader –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Instagram‚Ä¶"
                )
                try:
                    return _download_with_instaloader(url)
                except Exception as ie:
                    logger.error(
                        "instaloader —Ç–æ–∂–µ –Ω–µ —Å–º–æ–≥: %s", ie, exc_info=True
                    )
                    # –µ—Å–ª–∏ instaloader –Ω–µ –ø–æ–º–æ–≥ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                    return "", ""

            # –†–µ—à–∞–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Ä–µ—Ç—Ä–∞–∏—Ç—å yt-dlp
            if attempt < max_attempts and _should_retry(e):
                # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ + –¥–∂–∏—Ç—Ç–µ—Ä
                delay = base_sleep * (2 ** (attempt - 1)) + random.uniform(
                    0.2, 0.8
                )
                delay = min(delay, 6.0)
                logger.debug("–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %.1f —Å–µ–∫‚Ä¶", delay)
                time.sleep(delay)
                continue
            else:
                break
        except (
            socket.timeout, URLError, HTTPError, OSError, ConnectionError
        ) as ne:
            last_exc = ne
            logger.warning(
                "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (%d/%d): %s", attempt, max_attempts, ne
            )
            if attempt < max_attempts:
                delay = base_sleep * (2 ** (attempt - 1)) + random.uniform(
                    0.1, 0.6
                )
                delay = min(delay, 5.0)
                time.sleep(delay)
                continue
            break
        except Exception as e:
            # –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–∞–µ–≤
            last_exc = e
            logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
            break

    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: %s", last_exc)
    return "", ""


async def async_download_video_and_description(url: str) -> Tuple[str, str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    return await asyncio.to_thread(download_video_and_description, url)


async def cleanup_old_videos() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —É–¥–∞–ª—è—é—â–∞—è —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    while True:
        logger.info('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å')
        now = time.time()
        if os.path.exists(VIDEO_FOLDER):
            for filename in os.listdir(VIDEO_FOLDER):
                file_path = os.path.join(VIDEO_FOLDER, filename)
                try:
                    if os.path.isfile(file_path):
                        last_access = os.path.getatime(file_path)
                        if now - last_access > INACTIVITY_LIMIT_SECONDS:
                            os.remove(file_path)
                            logger.debug(
                                f'–£–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª: {file_path}'
                            )
                except Exception as e:
                    logger.error(
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {file_path} ‚Äî {e}'
                    )
        await asyncio.sleep(INACTIVITY_LIMIT_SECONDS)
