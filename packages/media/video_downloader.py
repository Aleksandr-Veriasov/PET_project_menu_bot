import asyncio
import logging
import os
import time

import yt_dlp

VIDEO_FOLDER = 'videos/'
if os.path.exists('/data'):
    COOKIE_PATH = '/data/cookies/instagram_cookies.txt'  # —Å–µ—Ä–≤–µ—Ä
else:
    COOKIE_PATH = 'data/cookies/instagram_cookies.txt'   # –ª–æ–∫–∞–ª—å–Ω–æ

WIDTH_VIDEO = 720  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
HEIGHT_VIDEO = 1280  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
INACTIVITY_LIMIT_SECONDS = 15 * 60  # 15 –º–∏–Ω—É—Ç

logger = logging.getLogger(__name__)


def _ensure_dir(path: str) -> None:
    if not os.path.exists(path):
        os.makedirs(path, exist_ok=True)
        logger.info(f'üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞: {path}')


def _finalize_path(raw_path: str, prefer_ext: str | None = 'mp4') -> str:
    """yt_dlp.prepare_filename(info) –¥–∞—ë—Ç –ø—É—Ç—å –¥–æ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ï—Å–ª–∏ –º—ã –º–µ—Ä–¥–∂–∏–º –≤ mp4, —É–¥–æ–±–Ω–µ–µ –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å .mp4.
    """
    if not prefer_ext:
        return raw_path
    base, _ = os.path.splitext(raw_path)
    return f'{base}.{prefer_ext}'


def _ydl_opts(output_path: str, *, use_cookie: bool = False) -> dict:
    opts = {
        'outtmpl': output_path,
        'format': 'bv+ba/best',
        'merge_output_format': 'mp4',
        'postprocessors': [
            {'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4'}
        ],
        'noprogress': True,
        'nocheckcertificate': True,
        # 'quiet': True,  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–∏—à–µ –≤ stdout
    }
    if use_cookie:
        opts['cookiefile'] = COOKIE_PATH
    return opts


def _try_download(url: str, *, use_cookie: bool) -> tuple[str, str]:
    """–û–¥–∏–Ω –∑–∞—Ö–æ–¥ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ. –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    output_path = os.path.join(VIDEO_FOLDER, '%(id)s.%(ext)s')
    ydl_opts = _ydl_opts(output_path, use_cookie=use_cookie)

    if use_cookie:
        if not os.path.isfile(COOKIE_PATH):
            raise FileNotFoundError(f'Cookie-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {COOKIE_PATH}')
        logger.info('üç™ –°–∫–∞—á–∏–≤–∞–µ–º —Å cookie-—Ñ–∞–π–ª–æ–º')

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)  # –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å
        raw_path = ydl.prepare_filename(info)
        file_path = _finalize_path(raw_path, prefer_ext='mp4')
        description = info.get('description', '') or ''
        logger.info(f'‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {file_path}')
        return file_path, description


def download_video_and_description(url: str) -> tuple[str, str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ: —Å–ø–µ—Ä–≤–∞ –±–µ–∑ cookie, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî —Å cookie —á–µ—Ä–µ–∑ 2 —Å–µ–∫.
    """
    _ensure_dir(VIDEO_FOLDER)

    logger.info(f'üîç –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –±–µ–∑ cookie: {url}')
    try:
        return _try_download(url, use_cookie=False)
    except Exception as e1:
        logger.warning(f'–ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ –±–µ–∑ cookie –Ω–µ —É–¥–∞–ª—Å—è: {e1}')

    # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å cookie (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
    if os.path.isfile(COOKIE_PATH):
        logger.info('‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–æ —Åookie‚Ä¶')
        time.sleep(2)
        try:
            return _try_download(url, use_cookie=True)
        except Exception as e2:
            logger.error(f'–ü–æ–≤—Ç–æ—Ä —Å cookie –Ω–µ —É–¥–∞–ª—Å—è: {e2}', exc_info=True)
            return '', ''
    else:
        logger.error(
            f'‚ùå Cookie-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {COOKIE_PATH}. –ü–æ–≤—Ç–æ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º.'
        )
        return '', ''


async def async_download_video_and_description(url: str) -> tuple[str, str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏."""
    return await asyncio.to_thread(download_video_and_description, url)


async def cleanup_old_videos() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —É–¥–∞–ª—è—é—â–∞—è —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    while True:
        logger.info('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å')
        now = time.time()
        if os.path.exists(VIDEO_FOLDER):
            for filename in os.listdir(VIDEO_FOLDER):
                file_path = os.path.join(VIDEO_FOLDER, filename)
                try:
                    if os.path.isfile(file_path):
                        last_access = os.path.getatime(file_path)
                        if now - last_access > INACTIVITY_LIMIT_SECONDS:
                            os.remove(file_path)
                            logger.info(
                                f'–£–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª: {file_path}'
                            )
                except Exception as e:
                    logger.error(
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {file_path} ‚Äî {e}'
                    )
        await asyncio.sleep(INACTIVITY_LIMIT_SECONDS)
