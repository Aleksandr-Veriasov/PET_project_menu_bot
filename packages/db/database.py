from __future__ import annotations

import logging
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Optional

from sqlalchemy import MetaData, text
from sqlalchemy.engine import URL
from sqlalchemy.ext.asyncio import (
    AsyncEngine,
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)

from packages.common_settings.settings import settings

logger = logging.getLogger(__name__)


class Database:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–∞ SQLAlchemy 2.0.

    - –£–ø—Ä–∞–≤–ª—è–µ—Ç AsyncEngine –∏ AsyncSession.
    - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π AsyncEngine (–¥–ª—è —Ç–µ—Å—Ç–æ–≤) –∏–ª–∏ URL (str/URL).
    - URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ê–°–ò–ù–•–†–û–ù–ù–´–ú (postgresql+asyncpg).
    """

    def __init__(
        self,
        db_url: Optional[str | URL] = None,
        engine: Optional[AsyncEngine] = None,
        *,
        echo: bool = False,
        pool_pre_ping: bool = settings.db.pool_pre_ping,
        pool_recycle: int = settings.db.pool_recycle,
        pool_size: Optional[int] = None,
        max_overflow: Optional[int] = None,
        pool_timeout: Optional[int] = None,
    ) -> None:
        if engine is not None:
            self.engine: AsyncEngine = engine
            safe = getattr(
                engine.sync_engine.url, 'render_as_string',
                lambda **_: '<engine>'
            )(hide_password=True)
            logger.info('üöÄ Async DB engine injected: %s', safe)
        else:
            url = db_url or settings.db.sqlalchemy_url()
            # –∑–∞—â–∏—Ç–∞ –æ—Ç sync-–¥—Ä–∞–π–≤–µ—Ä–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ
            is_async = (
                isinstance(url, URL) and url.drivername.endswith('+asyncpg')
            ) or (isinstance(url, str) and 'asyncpg' in url)

            if not is_async:
                raise ValueError(
                    '–ü–æ–ª—É—á–µ–Ω sync-–¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Database. '
                    '–°–æ–±–µ—Ä–∏—Ç–µ async URL (postgresql+asyncpg).'
                )

            # —Ä–∞–∑—É–º–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            if echo is None:
                echo = settings.debug
            if pool_pre_ping is None:
                pool_pre_ping = settings.db.pool_pre_ping
            if pool_recycle is None:
                pool_recycle = settings.db.pool_recycle

            engine_kwargs: dict[str, object] = {
                'echo': echo,
                'pool_pre_ping': pool_pre_ping,
                'pool_recycle': pool_recycle,
            }
            if pool_size is not None:
                engine_kwargs['pool_size'] = pool_size
            if max_overflow is not None:
                engine_kwargs['max_overflow'] = max_overflow
            if pool_timeout is not None:
                engine_kwargs['pool_timeout'] = pool_timeout

            self.engine = create_async_engine(url, **engine_kwargs)

            safe = (
                url.render_as_string(hide_password=True)
                if isinstance(url, URL) else '<masked url>'
            )
            logger.info('üöÄ Async DB engine created for %s', safe)

        self._sessionmaker: async_sessionmaker[AsyncSession] = (
            async_sessionmaker(
                bind=self.engine,
                expire_on_commit=False,
                class_=AsyncSession,
            )
        )

    def dispose(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—É–ª–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ shutdown)."""
        # AsyncEngine dispose() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –≤ sync_engine.dispose()
        self.engine.dispose()
        logger.info('üßπ Async DB engine disposed')

    def get_session(self) -> AsyncSession:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é (–Ω–µ –∑–∞–±—ã–≤–∞–π –∑–∞–∫—Ä—ã—Ç—å!)."""
        logger.debug('üíæ Creating Async DB session')
        return self._sessionmaker()

    @asynccontextmanager
    async def session(self) -> AsyncGenerator[AsyncSession, None]:
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∞–≤—Ç–æ-commit/rollback.

        –ü—Ä–∏–º–µ—Ä:
            async with db.session() as session:
                session.add(obj)
        """
        session: AsyncSession = self.get_session()
        try:
            yield session
            await session.commit()
        except Exception:
            logger.exception('‚ùå Error in Async DB session')
            await session.rollback()
            raise
        finally:
            await session.close()
            logger.debug('üîí Async DB session closed')

    async def healthcheck(self) -> bool:
        """–õ—ë–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î (async)."""
        try:
            async with self.engine.connect() as conn:
                await conn.execute(text('SELECT 1'))
            return True
        except Exception:
            logger.exception('‚ùå DB healthcheck failed')
            return False

    async def create_all(self, base_metadata: MetaData) -> None:
        """
        Bootstrap —Å—Ö–µ–º—ã (dev-only).
        –ü—Ä–∏–º–µ—Ä: await db.create_all(Base.metadata)
        """
        async with self.engine.begin() as conn:
            await conn.run_sync(base_metadata.create_all)
        logger.info('üì¶ Metadata.create_all() done')
