import json
import logging
from typing import Dict, List, Optional, Tuple

from redis.asyncio import Redis

from packages.redis import ttl
from packages.redis.keys import RedisKeys

logger = logging.getLogger(__name__)


class UserCacheRepository:

    @classmethod
    async def get_exists(cls, r: Redis, user_id: int) -> bool | None:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
          - True, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –µ—Å—Ç—å
          - None, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        """
        raw = await r.get(RedisKeys.user_exists(user_id=user_id))
        return True if raw is not None else None

    @classmethod
    async def set_exists(cls, r: Redis, user_id: int) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'.
        """
        await r.setex(
            RedisKeys.user_exists(user_id=user_id),
            ttl.USER_EXISTS,
            '1'
        )
        logger.debug(f'‚úÖ User {user_id} exists set in cache')

    @classmethod
    async def invalidate_exists(cls, r: Redis, user_id: int) -> None:
        """
        –£–¥–∞–ª–∏—Ç—å —Ñ–ª–∞–≥ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'.
        """
        await r.delete(RedisKeys.user_exists(user_id=user_id))


class RecipeCacheRepository:

    @classmethod
    async def get_recipe_count(cls, r: Redis, user_id: int) -> int | None:
        """
        –í–µ—Ä–Ω—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
        """
        raw = await r.get(RedisKeys.recipe_count(user_id=user_id))
        return int(raw) if raw is not None else None

    @classmethod
    async def set_recipe_count(
        cls, r: Redis, user_id: int, count: int
    ) -> None:
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis —Å TTL. """
        count_ttl = (
            ttl.RECIPE_COUNT_SHORT if count < 5 else ttl.RECIPE_COUNT_LONG
        )
        await r.setex(RedisKeys.recipe_count(
            user_id=user_id
        ), count_ttl, str(count))

    @classmethod
    async def invalidate_recipe_count(cls, r: Redis, user_id: int) -> None:
        """ –£–¥–∞–ª—è–µ—Ç –∫—ç—à –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
        await r.delete(RedisKeys.recipe_count(user_id=user_id))

    @classmethod
    async def get_all_recipes_ids_and_titles(
        cls, r: Redis, user_id: int, category_id: int
    ) -> Optional[List[dict[str, int | str]]]:
        """
        –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ (id, title) –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
        """
        raw = await r.get(
            RedisKeys.user_recipes_ids_and_titles(user_id, category_id)
        )
        logger.debug(f'üëâ Raw from Redis: {raw}')
        if raw is None:
            return None
        try:
            data = json.loads(raw)
            # –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            if isinstance(data, list) and all(
                isinstance(x, dict) for x in data
            ):
                return data
        except Exception:
            # –±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return None

    @classmethod
    async def set_all_recipes_ids_and_titles(
        cls, r: Redis, user_id: int, category_id: int,
        items: List[dict[str, int | str]]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ (id, title) –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis —Å TTL.
        """
        payload = json.dumps(items, ensure_ascii=False)
        await r.setex(
            RedisKeys.user_recipes_ids_and_titles(user_id, category_id),
            ttl.USER_RECIPES_IDS_AND_TITLES,
            payload
        )

    @classmethod
    async def invalidate_all_recipes_ids_and_titles(
        cls, r: Redis, user_id: int, category_id: int
    ) -> None:
        """ –£–¥–∞–ª—è–µ—Ç –∫—ç—à —Å–ø–∏—Å–∫–∞ (id, title) –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
        await r.delete(RedisKeys.user_recipes_ids_and_titles(
            user_id, category_id
        ))


class CategoryCacheRepository:

    @classmethod
    async def get_user_categories(
        cls, r: Redis, user_id: int
    ) -> Optional[List[Dict[str, str]]]:
        """
        –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{'name':..., 'slug':...}] –∏–∑ Redis
        –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
        """
        raw = await r.get(RedisKeys.user_categories(user_id))
        if raw is None:
            return None
        try:
            data = json.loads(raw)
            # –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            if isinstance(data, list) and all(
                isinstance(x, dict) for x in data
            ):
                return data
        except Exception:
            # –±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return None

    @classmethod
    async def set_user_categories(
        cls, r: Redis, user_id: int, items: List[Dict[str, str]]
    ) -> None:
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis —Å TTL. """
        payload = json.dumps(items, ensure_ascii=False)
        await r.setex(
            RedisKeys.user_categories(user_id), ttl.USER_CATEGORIES, payload
        )

    @classmethod
    async def invalidate_user_categories(cls, r: Redis, user_id: int) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –∫—ç—à (–∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π/—Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
        """
        await r.delete(RedisKeys.user_categories(user_id))

    @classmethod
    async def get_id_name_by_slug(
        cls, r: Redis, slug: str
    ) -> Optional[Tuple[int, str]]:
        """
        –í–µ—Ä–Ω—ë—Ç (id, name) –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Redis –ø–æ slug
        –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
        """
        raw = await r.get(RedisKeys.category_by_slug(slug))
        if raw is None:
            return None
        # —Ñ–æ—Ä–º–∞—Ç 'id|name'
        try:
            s_id, s_name = raw.split('|', 1)
            return int(s_id), s_name
        except Exception:
            # –±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø–æ–¥—á–∏—Å—Ç–∏–º
            await r.delete(RedisKeys.category_by_slug(slug))
            return None

    @classmethod
    async def set_id_name_by_slug(
        cls, r: Redis, slug: str, cat_id: int, name: str
    ) -> None:
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç (id, name) –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Redis –ø–æ slug. """
        value = f'{int(cat_id)}|{name}'
        await r.set(RedisKeys.category_by_slug(slug), value)

    @classmethod
    async def invalidate_by_slug(cls, r: Redis, slug: str) -> None:
        """ –£–¥–∞–ª—è–µ—Ç –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ slug. """
        await r.delete(RedisKeys.category_by_slug(slug))

    @classmethod
    async def get_all_name_and_slug(
        cls, r: Redis
    ) -> Optional[List[Dict[str, str]]]:
        """
        –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{'name':..., 'slug':...}] –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑
        Redis –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
        """
        raw = await r.get(RedisKeys.all_category())
        if raw is None:
            return None
        try:
            data = json.loads(raw)
            # –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            if isinstance(data, list) and all(
                isinstance(x, dict) for x in data
            ):
                return data
        except Exception:
            # –±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            await r.delete(RedisKeys.all_category())
            logger.debug(f'‚ùå –ó–∞–ø–∏—Å—å {RedisKeys.all_category()} –±–∏—Ç–∞—è, —É–¥–∞–ª–µ–Ω–∞')
            return None

    @classmethod
    async def set_all_name_and_slug(
        cls, r: Redis, items: List[Dict[str, str]]
    ) -> None:
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ Redis —Å TTL. """
        payload = json.dumps(items, ensure_ascii=False)
        await r.set(RedisKeys.all_category(), payload)
        logger.debug(f'‚úÖ –ó–∞–ø–∏—Å—å {RedisKeys.all_category()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à')

    @classmethod
    async def invalidate_all_name_and_slug(cls, r: Redis) -> None:
        """ –£–¥–∞–ª—è–µ—Ç –∫—ç—à –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. """
        await r.delete(RedisKeys.all_category())
        logger.debug(f'‚ùå –ó–∞–ø–∏—Å—å {RedisKeys.all_category()} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞')
