import asyncio
import logging
from contextlib import suppress
from typing import Optional, cast

from telegram.ext import Application

from packages.common_settings.settings import settings
from packages.db.database import Database
from packages.db.models import Base
from packages.media.video_downloader import cleanup_old_videos
from bot.app.handlers.setup import setup_handlers
from bot.app.core.types import AppState, PTBApp
from packages.logging_config import setup_logging
from packages.redis.redis_conn import get_redis, close_redis

setup_logging()
logger = logging.getLogger(__name__)


def create_app() -> PTBApp:
    # 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–µ–∫—Ä–µ—Ç—ã
    token = settings.telegram.bot_token.get_secret_value().strip()
    if not token:
        raise ValueError('‚ùå TELEGRAM_BOT_TOKEN –ø—É—Å—Ç.')

    # 2) –°–±–æ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (composition root)
    state = AppState(
        db=Database(
            db_url=settings.db.sqlalchemy_url(),
            echo=settings.debug,
            pool_recycle=settings.db.pool_recycle,
            pool_pre_ping=settings.db.pool_pre_ping,
        ),
        cleanup_task=None,  # –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –¥–µ—Ä–∂–∏–º —Ç—É—Ç
    )

    # 3) Callbacks —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    async def on_startup(app: PTBApp) -> None:
        # –∫–ª–∞–¥—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ bot_data
        # (–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ post_init, –∫–æ–≥–¥–∞ app —É–∂–µ –µ—Å—Ç—å)
        app.bot_data['state'] = state
        state.redis = await get_redis()
        pong = await state.redis.ping()
        logger.info('üß† Redis –ø–æ–¥–∫–ª—é—á—ë–Ω, PING=%s', pong)

        logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ‚Ä¶')
        state.cleanup_task = asyncio.create_task(cleanup_old_videos())

        # –ø–µ—Ä–≤–∏—á–Ω—ã–π bootstrap —Å—Ö–µ–º—ã: –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ
        if settings.db.bootstrap_schema:
            await state.db.create_all(Base.metadata)

        ok = await state.db.healthcheck()
        if not ok:
            raise RuntimeError('DB healthcheck failed at startup')

    async def on_shutdown(app: PTBApp) -> None:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        # –¥–æ—Å—Ç–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–∞—Å–∏–º —Ä–µ—Å—É—Ä—Å—ã
        cur_state: AppState = app.bot_data['state']

        task: Optional[asyncio.Task[None]] = cur_state.cleanup_task
        if task and not task.done():
            logger.info('‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É‚Ä¶')
            task.cancel()
            with suppress(asyncio.CancelledError):
                await task
            logger.info('‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

        # –ó–∞–∫—Ä—ã—Ç—å Redis
        if cur_state.redis is not None:
            await close_redis()
            cur_state.redis = None
            logger.info('üîí Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.')

        cur_state.db.dispose()
        logger.info('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç—ã.')

    # 4) –°–±–æ—Ä–∫–∞ Application
    def build_app(token: str) -> PTBApp:
        return cast(
            PTBApp,
            Application.builder()
                       .token(token)
                       .post_init(on_startup)
                       .post_shutdown(on_shutdown)
                       .build()
        )

    app = build_app(token)

    # 5) –ú–∞—Ä—à—Ä—É—Ç—ã/—Ö–µ–Ω–¥–ª–µ—Ä—ã
    setup_handlers(app)

    return app


if __name__ == '__main__':
    try:
        application = create_app()
        logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶')
        application.run_polling(
            poll_interval=1.0,
            # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ—è
            drop_pending_updates=True,
            # allowed_updates=Update.ALL_TYPES,  # –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
        )
    except Exception:
        logger.exception('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞')
        raise
