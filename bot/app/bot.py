import asyncio
import logging
from contextlib import asynccontextmanager, suppress
from typing import Optional, cast

from fastapi import FastAPI, HTTPException, Request
from telegram import Update
from telegram.ext import Application

from bot.app.core.types import AppState, PTBApp
from bot.app.handlers.setup import setup_handlers
from packages.common_settings.settings import settings
from packages.db.database import Database
from packages.db.models import Base
from packages.logging_config import setup_logging
from packages.media.video_downloader import cleanup_old_videos
from packages.redis.redis_conn import close_redis, get_redis

setup_logging()
logger = logging.getLogger(__name__)
_PTBA: Optional[PTBApp] = None


def create_app() -> PTBApp:
    # 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–µ–∫—Ä–µ—Ç—ã
    token = settings.telegram.bot_token.get_secret_value().strip()
    if not token:
        raise ValueError('‚ùå TELEGRAM_BOT_TOKEN –ø—É—Å—Ç.')

    # 2) –°–±–æ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (composition root)
    state = AppState(
        db=Database(
            db_url=settings.db.sqlalchemy_url(),
            echo=settings.debug,
            pool_recycle=settings.db.pool_recycle,
            pool_pre_ping=settings.db.pool_pre_ping,
        ),
        cleanup_task=None,  # –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –¥–µ—Ä–∂–∏–º —Ç—É—Ç
    )

    # 3) Callbacks —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    async def on_startup(app: PTBApp) -> None:
        # –∫–ª–∞–¥—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ bot_data
        # (–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ post_init, –∫–æ–≥–¥–∞ app —É–∂–µ –µ—Å—Ç—å)
        app.bot_data['state'] = state
        state.redis = await get_redis()
        pong = await state.redis.ping()
        logger.info('üß† Redis –ø–æ–¥–∫–ª—é—á—ë–Ω, PING=%s', pong)

        logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ‚Ä¶')
        state.cleanup_task = asyncio.create_task(cleanup_old_videos())

        # –ø–µ—Ä–≤–∏—á–Ω—ã–π bootstrap —Å—Ö–µ–º—ã: –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ
        if settings.db.bootstrap_schema:
            await state.db.create_all(Base.metadata)

        ok = await state.db.healthcheck()
        if not ok:
            raise RuntimeError('DB healthcheck failed at startup')

        if settings.telegram.use_webhook:
            url = settings.webhooks.url()
            secret = settings.webhooks.secret_token.get_secret_value()
            await app.bot.set_webhook(
                url=url,
                secret_token=secret,
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query', 'inline_query'],
            )
            logger.info('üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s', url)

    async def on_shutdown(app: PTBApp) -> None:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        # –¥–æ—Å—Ç–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–∞—Å–∏–º —Ä–µ—Å—É—Ä—Å—ã
        cur_state: AppState = app.bot_data['state']

        task: Optional[asyncio.Task[None]] = cur_state.cleanup_task
        if task and not task.done():
            logger.info('‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É‚Ä¶')
            task.cancel()
            with suppress(asyncio.CancelledError):
                await task
            logger.info('‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

        # –ó–∞–∫—Ä—ã—Ç—å Redis
        if cur_state.redis is not None:
            await close_redis()
            cur_state.redis = None
            logger.info('üîí Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.')

        cur_state.db.dispose()
        logger.info('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç—ã.')

    # 4) –°–±–æ—Ä–∫–∞ Application
    def build_app(token: str) -> PTBApp:
        return cast(
            PTBApp,
            Application.builder()
                       .token(token)
                       .post_init(on_startup)
                       .post_shutdown(on_shutdown)
                       .build()
        )

    app = build_app(token)

    # 5) –ú–∞—Ä—à—Ä—É—Ç—ã/—Ö–µ–Ω–¥–ª–µ—Ä—ã
    setup_handlers(app)

    return app


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    FastAPI lifespan: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB –≤–Ω—É—Ç—Ä–∏ FastAPI
    """
    ptba = create_app()
    await ptba.initialize()
    await ptba.start()
    app.state.ptba = ptba
    try:
        yield
    finally:
        await ptba.stop()
        await ptba.shutdown()
        app.state.ptba = None


fastapi_app = FastAPI(title='Telegram Bot Webhook', lifespan=lifespan)


@fastapi_app.post(settings.webhooks.path())
async def telegram_webhook(request: Request):
    """
    –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è Telegram:
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Bot-Api-Secret-Token
    - –ø–∞—Ä—Å–∏–º –∞–ø–¥–µ–π—Ç –∏ –∫–ª–∞–¥—ë–º –≤ PTB –æ—á–µ—Ä–µ–¥—å
    """
    global _PTBA
    if _PTBA is None:
        raise HTTPException(status_code=503, detail='PTB not ready')

    secret_hdr = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    if secret_hdr != settings.webhooks.secret_token.get_secret_value():
        raise HTTPException(status_code=403, detail='Invalid secret token')

    data = await request.json()
    update = Update.de_json(data, _PTBA.bot)
    await _PTBA.update_queue.put(update)
    return {'ok': True}


if __name__ == '__main__':
    if not settings.telegram.use_webhook:
        # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: polling
        try:
            application = create_app()
            logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶')
            application.run_polling(
                poll_interval=1.0,
                drop_pending_updates=True,
            )
        except Exception:
            logger.exception('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (polling)')
            raise
    else:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞: –ø–æ–¥–Ω–∏–º–∞–µ–º FastAPI-—Å–µ—Ä–≤–µ—Ä –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        import uvicorn
        port = settings.webhooks.port
        logger.info('üåê –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ FastAPI –Ω–∞ –ø–æ—Ä—Ç—É %s', port)
        uvicorn.run(
            'bot:fastapi_app',
            host='0.0.0.0',
            port=port,
            # reload –Ω–µ –Ω—É–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            workers=settings.fast_api.uvicorn_workers,
            log_level='info',
        )
