import logging
import random
from typing import Optional

from redis.asyncio import Redis

from bot.app.services.category_service import CategoryService
from bot.app.services.recipe_service import RecipeService
from packages.db.database import Database
from packages.db.repository import RecipeRepository, VideoRepository

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


async def random_recipe(
    db: Database,
    redis: Redis,
    user_id: int,
    category_slug: str
) -> tuple[Optional[str], str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    service_cat = CategoryService(db, redis)
    category_id, category_name = (
        await service_cat.get_id_and_name_by_slug_cached(category_slug)
    )
    service_rec = RecipeService(db, redis)
    recipes = await service_rec.get_all_recipes_ids_and_titles(
        user_id, category_id
    )
    recipes_ids = [recipe['id'] for recipe in recipes]
    random_recipe_id = random.choice(recipes_ids)
    async with db.session() as session:
        recipe = await RecipeRepository().get_recipe_with_connections(
            session, random_recipe_id
        )
        if recipe is None:
            return '', ''
        else:
            video_url = await VideoRepository().get_video_url(
                session, int(recipe.id)
            )
            logger.debug(
                f'‚óÄÔ∏è {video_url} - video URL –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ {recipe.title}'
            )
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            ingredients_text = '\n'.join(
                f"- {ingredient.name}" for ingredient in recipe.ingredients
            )
            text = (
                f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}":\n\n'
                f'üçΩ *{recipe.title}*\n\n'
                f'üìù {recipe.description or ""}\n\n'
                f'ü•¶ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients_text}'
            )
            return video_url, text
