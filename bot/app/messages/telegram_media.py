from __future__ import annotations

import asyncio
import logging
import random
from pathlib import Path
from typing import Final

from telegram import InputFile
from telegram.error import BadRequest, NetworkError, RetryAfter, TimedOut

from bot.app.core.types import PTBContext
from packages.common_settings.settings import settings

logger = logging.getLogger(__name__)

_MAX_RETRIES: Final[int] = 4
_BASE_DELAY_SEC: Final[float] = 1.5
_MAX_JITTER_SEC: Final[float] = 0.4


async def send_video_to_channel(
    context: PTBContext,
    converted_video_path: str,
    *,
    caption: str = 'üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!',
    max_retries: int = _MAX_RETRIES,
) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.
    """
    p = Path(converted_video_path)
    if not p.is_file():
        logger.error('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s', p)
        return ''

    for attempt in range(1, max_retries + 1):
        try:
            # –ö–∞–∂–¥—ã–π —Ä–∞–∑ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ ‚Äî –ø–æ—Å–ª–µ
            # –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å ¬´–∏—Å—á–µ—Ä–ø–∞–Ω¬ª
            with p.open('rb') as f:
                msg = await context.bot.send_video(
                    chat_id=settings.telegram.chat_id,
                    video=InputFile(f, filename=p.name),
                    caption=caption,
                    supports_streaming=True,
                    allow_sending_without_reply=True,
                    read_timeout=90,
                    write_timeout=90
                )

            file_id = msg.video.file_id if msg.video else ''
            logger.debug(
                '‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (attempt=%s): file_id=%s, message_id=%s',
                attempt, file_id, msg.message_id
            )
            return file_id

        except RetryAfter as e:
            # Telegram –ø–æ–ø—Ä–æ—Å–∏–ª –ø–æ–¥–æ–∂–¥–∞—Ç—å (Flood/429)
            wait_for = max(float(getattr(e, 'retry_after', 1)), 1.0)
            logger.warning(
                '‚è≥ RetryAfter: –∂–¥—ë–º %.1fs (attempt %s/%s)',
                wait_for, attempt, max_retries
            )
            await asyncio.sleep(wait_for)

        except TimedOut:
            # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–∞—É—Ç —Å–µ—Ç–∏/—á—Ç–µ–Ω–∏—è
            if attempt >= max_retries:
                logger.error(
                    '‚ùå TimedOut. –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã (%s/%s)',
                    attempt, max_retries
                )
                break
            backoff = _BASE_DELAY_SEC * (2 ** (attempt - 1)) + random.uniform(
                0, _MAX_JITTER_SEC
            )
            logger.warning(
                '‚ö†Ô∏è TimedOut –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. '
                '–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %.2fs (attempt %s/%s)',
                backoff, attempt, max_retries
            )
            await asyncio.sleep(backoff)

        except NetworkError as e:
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–±–æ–∏ (–æ–±—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ç.–ø.)
            if attempt >= max_retries:
                logger.error(
                    '‚ùå NetworkError: %s. –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã (%s/%s)', e,
                    attempt, max_retries
                )
                break
            backoff = _BASE_DELAY_SEC * (2 ** (attempt - 1)) + random.uniform(
                0, _MAX_JITTER_SEC
            )
            logger.warning(
                'üåê NetworkError: %s. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %.2fs (attempt %s/%s)',
                e, backoff, attempt, max_retries
            )
            await asyncio.sleep(backoff)

        except BadRequest as e:
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π / –Ω–µ–≤–µ—Ä–Ω—ã–µ
            # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã) ‚Äî —Ä–µ—Ç—Ä–∞–∏—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ
            logger.error(
                '‚ùå BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s', e, exc_info=True
            )
            return ''

        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            # (–æ–±—ã—á–Ω–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ä–µ—Ç—Ä–∞–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
            logger.error(
                'üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s', e,
                exc_info=True
            )
            return ''

    # –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É—à–ª–∏ –≤ —Ä–µ—Ç—Ä–∞–∏, –Ω–æ —É—Å–ø–µ—Ö–∞ –Ω–µ—Ç
    return ''
