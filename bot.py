import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext, CallbackQueryHandler
from deepseek_api import extract_recipe_data_with_deepseek
from video_downloader import download_video_and_description, get_video_resolution, convert_to_mp4
from audio_extractor import extract_audio
from speech_recognition import transcribe_audio
from handlers import setup_handlers, send_recipe_confirmation


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = "@gmzcvi"  # –£–∫–∞–∂–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ.")

async def handle_video_link(update: Update, context: CallbackContext):
    try:
        url = update.message.text
        await update.message.reply_text("üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ...")

        video_path, description = download_video_and_description(url)
        if not video_path:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        width, height = get_video_resolution(video_path)
        if not width or not height:
            width, height = 720, 1280  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–∞–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

        await update.message.reply_text(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {width}x{height}")

        await update.message.reply_text("üé• –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ MP4...")
        converted_video_path = convert_to_mp4(video_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª
        with open(converted_video_path, "rb") as video:
            await context.bot.send_video(
                chat_id=CHANNEL_ID,
                video=video,
                caption="üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!",
                width=width,
                height=height
            )

        await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        # **–í—Å–µ–≥–¥–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ**
        await update.message.reply_text("üéô –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
        audio_path = extract_audio(converted_video_path)

        await update.message.reply_text("üìù –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ...")
        recognized_text = transcribe_audio(audio_path)

        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å) –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ DeepSeek API
        title, recipe, ingredients = extract_recipe_data_with_deepseek(description, recognized_text)

        if title and recipe and ingredients:
            await send_recipe_confirmation(update, title, recipe, ingredients)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞.")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for file in [video_path, converted_video_path, audio_path]:
            if os.path.exists(file):
                os.remove(file)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_link))
setup_handlers(app)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
