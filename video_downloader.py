import ffmpeg
import logging
import os

import yt_dlp
from telegram import Update
from telegram.ext import CallbackContext

VIDEO_FOLDER = 'videos/'


def download_video_and_description(url):
    '''–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.'''
    if not os.path.exists(VIDEO_FOLDER):
        os.makedirs(VIDEO_FOLDER)

    output_path = os.path.join(VIDEO_FOLDER, '%(title)s.%(ext)s')

    ydl_opts = {
        'outtmpl': 'videos/%(title)s.%(ext)s',
        'format': 'bv+ba/best',  # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ –≤–º–µ—Å—Ç–µ
        'merge_output_format': 'mp4',  # Telegram —Ç—Ä–µ–±—É–µ—Ç MP4
        'postprocessors': [
            {
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4'
            }
        ],
        'noprogress': True,
        'nocheckcertificate': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)
            description = info.get('description', '')
            return file_path, description
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}')
        return None


def get_video_resolution(video_path):
    '''–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ'''
    try:
        probe = ffmpeg.probe(
            video_path, v='error',
            select_streams='v:0',
            show_entries='stream=width,height'
        )
        width = probe['streams'][0]['width']
        height = probe['streams'][0]['height']
        return width, height
    except ffmpeg.Error as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}')
        return None, None


def correct_resolution(width, height):
    '''–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –æ–Ω–æ –¥–µ–ª–∏–ª–æ—Å—å –Ω–∞ 2'''
    if width % 2 != 0:
        width -= 1
    if height % 2 != 0:
        height -= 1
    return width, height


def convert_to_mp4(input_path):
    '''–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ MP4 (H.264) —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ 40%.'''
    output_path = input_path.rsplit('.', 1)[0] + '_converted.mp4'

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    width, height = get_video_resolution(input_path)

    if width is None or height is None:
        logging.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ')
        return None

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    corrected_width, corrected_height = correct_resolution(width, height)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    logging.info(f'–ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {width}x{height}')
    logging.info(
        f'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {corrected_width}x{corrected_height}'
    )

    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ 40%
    new_width = int(corrected_width * 0.6)
    new_height = int(corrected_height * 0.6)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ 2 (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
    new_width, new_height = correct_resolution(new_width, new_height)

    logging.info(
        f'–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ 40%: {new_width}x{new_height}'
    )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        ffmpeg.input(input_path).output(
            output_path,
            vf=f'scale={new_width}:{new_height}',
            vcodec='libx264',
            acodec='aac',
            crf=32
        ).run()
        logging.info(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path}')
    except ffmpeg.Error as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}')
        return None

    return output_path


async def send_video_to_channel(
        update: Update,
        context: CallbackContext,
        converted_video_path: str
):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.
    '''
    try:
        with open(converted_video_path, 'rb') as video:
            message = await context.bot.send_video(
                chat_id='@gmzcvi',  # –£–∫–∞–∑–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                video=video,
                caption='üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!',
                width=720,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
                height=1280  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
            )

        # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ
        video_file_id = message.video.file_id

        return video_file_id  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª: {e}')
        return None
