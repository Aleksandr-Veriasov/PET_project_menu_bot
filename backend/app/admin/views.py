from __future__ import annotations

import logging
from typing import Any, ClassVar, Optional

from markupsafe import Markup, escape
from sqladmin import Admin, ModelView
from sqladmin.authentication import AuthenticationBackend
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.requests import Request

from packages.db.database import Database
from packages.db.models import Admin as AdminModel
from packages.db.models import Category, Ingredient, Recipe, User, Video
from packages.redis.redis_conn import get_redis
from packages.redis.repository import CategoryCacheRepository
from packages.security.passwords import verify_password

logger = logging.getLogger(__name__)


class AdminAuth(AuthenticationBackend):
    def __init__(self, db: Database, secret_key: str = 'admin-auth') -> None:
        super().__init__(secret_key)
        self.db = db

    async def login(self, request: Request) -> bool:
        try:
            form = await request.form()
            username = (
                str(form.get('username') or '').strip()
                if isinstance(form.get('username'), str) else ''
            )
            logger.debug(f'üìº username = {username}')

            password = (
                str(form.get('password') or '').strip()
                if isinstance(form.get('password'), str) else ''
            )
            if not username or not password:
                return False

            async with self.db.session() as session:  # AsyncSession
                admin = await self._get_admin(session, username)
                logger.debug(f'üìº admin = {admin}')

            if not admin:
                return False

            if verify_password(password, str(admin.password_hash)):
                # –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤–æ—à–µ–¥—à—É—é
                request.session['admin_login'] = admin.login
                return True

            return False
        except Exception as e:
            # –≤–∞–∂–Ω—ã–π –ª–æ–≥ ‚Äî —É–≤–∏–¥–∏—à—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É 500 –≤ –∫–æ–Ω—Å–æ–ª–∏
            logging.getLogger(__name__).exception(
                'AdminAuth.login failed: %s', e
            )
            return False

    async def logout(self, request: Request) -> bool:
        request.session.clear()
        return True

    async def authenticate(self, request: Request) -> bool:
        return 'admin_login' in request.session

    async def _get_admin(
            self, session: AsyncSession, login: str
    ) -> Optional[AdminModel]:
        res = await session.execute(select(AdminModel).where(
            AdminModel.login == login
        ))
        return res.scalar_one_or_none()


class UserAdmin(ModelView, model=User):
    name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
    icon = 'fa-solid fa-user'

    column_list = [
        'id',
        'username',
        'first_name',
        'last_name',
        'created_at',
        'recipes_count',
    ]
    column_labels = {
        'id': 'ID',
        'username': '–õ–æ–≥–∏–Ω',
        'first_name': '–ò–º—è',
        'last_name': '–§–∞–º–∏–ª–∏—è',
        'created_at': '–°–æ–∑–¥–∞–Ω',
        'recipes_count': '–†–µ—Ü–µ–ø—Ç–æ–≤',
        'recipes_name': '–†–µ—Ü–µ–ø—Ç—ã'
    }
    column_sortable_list = ['id', 'username', 'created_at']
    column_searchable_list = ['id', 'username', 'first_name', 'last_name']

    column_details_list = [
        'id',
        'username',
        'first_name',
        'last_name',
        'created_at',
        'recipes_name',
    ]

    form_columns = ['username', 'first_name', 'last_name']

    can_create = True
    can_edit = True
    can_delete = False

    column_formatters = {
        'recipes_count': lambda m, _: len(getattr(m, 'recipes') or []),
    }

    column_formatters_detail: ClassVar[Any] = {
        'recipes_name': lambda m, _:
            (Markup('<br>'.join(escape(r.title) for r in (m.recipes or [])))
             if m.recipes else '‚Äî'),
    }


class CategoryAdmin(ModelView, model=Category):
    name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
    icon = 'fa-solid fa-folder'

    column_list = ['id', 'name', 'slug', 'recipes_count']
    column_details_list = ['id', 'name', 'slug']

    column_labels = {
        'id': 'ID',
        'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'slug': '–°–ª–∞–≥',
        'recipes_count': '–ö–æ–ª-–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤',
    }
    column_sortable_list = ['id', 'name', 'slug']
    column_searchable_list = ['name', 'slug']

    form_columns = ['name', 'slug']

    can_create = True
    can_edit = True
    can_delete = True

    column_formatters = {
        'recipes_count': lambda m, _: len(getattr(m, 'recipes') or []),
    }

    async def on_model_change(
        self,
        data: dict,
        model: Category,
        is_created: bool,
        request: Request,
    ) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        –°–æ—Ö—Ä–∞–Ω–∏–º —Å—Ç–∞—Ä—ã–π slug, —á—Ç–æ–±—ã after_model_change –º–æ–≥ —Å—Ä–∞–≤–Ω–∏—Ç—å.
        """
        if not is_created:
            # model.slug –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ ‚Äî —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            request.state._old_slug = model.slug
            logger.debug(f'Old slug saved: {request.state._old_slug}')

    async def after_model_change(
        self,
        data: dict,
        model: Category,
        is_created: bool,
        request: Request,
    ) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        ‚Ä¢ –ï—Å–ª–∏ slug –º–µ–Ω—è–ª—Å—è ‚Äî –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á.
        ‚Ä¢ –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ slug.
        """
        # –¥–æ—Å—Ç–∞—ë–º Redis –∏–∑ —Ç–≤–æ–µ–≥–æ AppState
        redis = await get_redis()
        if not redis:
            logger.warning('Redis is not available via get_redis()')
            return

        old_slug = getattr(request.state, '_old_slug', None)
        new_slug = model.slug
        logger.debug(f'New slug: {new_slug}')

        # –µ—Å–ª–∏ —ç—Ç–æ –∞–ø–¥–µ–π—Ç –∏ slug –ø–æ–º–µ–Ω—è–ª—Å—è ‚Äî —Å–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
        if not is_created and old_slug and old_slug != new_slug:
            await CategoryCacheRepository.invalidate_by_slug(redis, old_slug)

        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º –∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
        await CategoryCacheRepository.invalidate_by_slug(redis, str(new_slug))
        await CategoryCacheRepository.set_id_name_by_slug(
            redis, str(new_slug), model.id, model.name
        )

    async def after_model_delete(
            self, model: Category, request: Request
    ) -> None:
        """
        –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —á–∏—Å—Ç–∏–º –∫–ª—é—á –ø–æ slug.
        """
        redis = await get_redis()
        if not redis:
            logger.warning('Redis is not available via get_redis()')
            return
        await CategoryCacheRepository.invalidate_by_slug(
            redis, str(model.slug)
        )


# ---------- Ingredient ----------
class IngredientAdmin(ModelView, model=Ingredient):
    name = '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'
    name_plural = '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'
    icon = 'fa-solid fa-seedling'
    page_size: ClassVar[int] = 20

    column_list = ['id', 'name', 'recipes_count']
    column_details_list = ['id', 'name', 'recipes_name']
    column_labels = {
        'id': 'ID',
        'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'recipes_count': '–í —Ä–µ—Ü–µ–ø—Ç–∞—Ö',
        'recipes_name': '–†–µ—Ü–µ–ø—Ç—ã'
    }
    column_sortable_list = ['id', 'name']
    column_searchable_list = ['name']

    form_columns = ['name']

    can_create = True
    can_edit = True
    can_delete = True

    column_formatters: ClassVar[Any] = {
        'recipes_count': lambda m, _: len(getattr(m, 'recipes') or []),
    }

    column_formatters_detail: ClassVar[Any] = {
        'recipes_name': lambda m, _:
            (Markup('<br>'.join(escape(r.title) for r in (m.recipes or [])))
             if m.recipes else '‚Äî'),
    }


# ---------- Video ----------
class VideoAdmin(ModelView, model=Video):
    name = '–í–∏–¥–µ–æ'
    name_plural = '–í–∏–¥–µ–æ'
    icon = 'fa-solid fa-video'

    column_list = ['id', 'recipe_title', 'video_url']
    column_details_list = ['id', 'recipe_title', 'video_url']
    column_labels = {
        'id': 'ID',
        'recipe_title': '–†–µ—Ü–µ–ø—Ç',
        'video_url': '–°—Å—ã–ª–∫–∞',
    }
    column_sortable_list = ['id']
    column_searchable_list = ['video_url']

    form_columns = ['recipe', 'video_url']

    can_create = True
    can_edit = True
    can_delete = True

    column_formatters: ClassVar[Any] = {
        'recipe_title': lambda m, _: (m.recipe.title if m.recipe else '‚Äî'),
        'video_url': lambda m, _: (m.video_url if m.video_url else '‚Äî'),
    }

    column_formatters_detail: ClassVar[Any] = {
        'recipe_title': lambda m, _: (m.recipe.title if m.recipe else '‚Äî'),
        'video_url': lambda m, _: (m.video_url if m.video_url else '‚Äî'),
    }

    # –≤—ã–ø–∞–¥–∞—é—â–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º
    form_ajax_refs = {
        'recipe': {'fields': ('title',)},
    }


# ---------- Recipe ----------
class RecipeAdmin(ModelView, model=Recipe):
    name = '–†–µ—Ü–µ–ø—Ç'
    name_plural = '–†–µ—Ü–µ–ø—Ç—ã'
    icon = 'fa-solid fa-bowl-food'
    page_size: ClassVar[int] = 20

    column_list = [
        'id',
        'title',
        'category_name',
        'user_username',
        'ingredients_count',
        'has_video',
        'created_at',
    ]
    column_labels = {
        'id': 'ID',
        'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'category_name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        'user_username': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'ingredients_count': '–ò–Ω–≥—Ä., —à—Ç.',
        'has_video': '–í–∏–¥–µ–æ',
        'created_at': '–°–æ–∑–¥–∞–Ω',
        'ingredients_text': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
        'video_link': '–í–∏–¥–µ–æ',
    }
    column_sortable_list = ['id', 'title', 'created_at']
    column_searchable_list = ['title']

    column_details_list = [
        'id',
        'title',
        'description',
        'ingredients_text',
        'category_name',
        'user_username',
        'video_link',
        'created_at',
    ]

    form_columns = [
        'title',
        'description',
        'user',
        'category',
        'ingredients',
        'video',
    ]

    can_create = True
    can_edit = True
    can_delete = False

    column_formatters: ClassVar[Any] = {
        'category_name': lambda m, _: (m.category.name if m.category else '‚Äî'),
        'user_username': lambda m, _: (
            (m.user.username or f'ID {m.user.id}') if m.user else '‚Äî'
        ),
        'ingredients_count': lambda m, _: len(m.ingredients or []),
        'has_video': lambda m, _: '‚úì' if getattr(m, 'video', None) else '‚Äî',
    }

    column_formatters_detail: ClassVar[Any] = {
        'category_name': lambda m, _: (m.category.name if m.category else '‚Äî'),
        'user_username': lambda m, _: (
            (m.user.username or f'ID {m.user.id}') if m.user else '‚Äî'
        ),
        'ingredients_text': lambda m, _: (
            Markup('<br>'.join(escape(i.name) for i in (m.ingredients or [])))
            if m.ingredients else '‚Äî'
        ),
        'video_link': lambda m, _: (
            m.video.video_url if m.video and m.video.video_url else '‚Äî'
        ),
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML
        'description': lambda m, _: Markup('<br>'.join(
            escape(m.description).splitlines()
        )) if m.description else '‚Äî',
    }

    # ajax-–ø–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ö
    form_ajax_refs = {
        'user': {'fields': ('username', 'first_name', 'last_name')},
        'category': {'fields': ('name', 'slug')},
        'ingredients': {'fields': ('name',), 'page_size': 20},
    }


class AdminUserAdmin(ModelView, model=AdminModel):
    name = '–ê–¥–º–∏–Ω'
    name_plural = '–ê–¥–º–∏–Ω—ã'
    icon = 'fa-solid fa-user'


def setup_admin(admin: Admin) -> None:
    """ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ ModelView –≤ SQLAdmin. """
    admin.add_view(UserAdmin)
    admin.add_view(RecipeAdmin)
    admin.add_view(CategoryAdmin)
    admin.add_view(VideoAdmin)
    admin.add_view(IngredientAdmin)
    # admin.add_view(AdminUserAdmin)
