import asyncio
import logging
import os
from datetime import datetime
from typing import cast

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from app.audio_extractor import extract_audio
from app.db import get_engine, get_session
from app.db_utils import (
    add_category_if_not_exists,
    add_recipe,
    add_user_if_not_exists,
    add_video_to_recipe,
    delete_recipe,
    get_recipe,
    get_recipes_by_category_name,
)
from app.deepseek_api import extract_recipe_data_async
from app.helpers import (
    get_safe_callback_data,
    get_safe_callback_query,
    get_safe_message_from_update,
    get_safe_query_message,
    get_safe_text_from_update,
    get_safe_user_data,
)
from app.message_utils import (
    send_random_recipe,
    send_recipe_confirmation,
    send_recipe_list,
)
from app.recipe_edit import edit_recipe_conv, start_edit
from app.speech_recognition import async_transcribe_audio
from app.state import user_data_tempotary
from app.video_downloader import (
    async_convert_to_mp4,
    async_download_video_and_description,
    send_video_to_channel,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

engine = get_engine()
session = get_session(engine)

AUDIO_FOLDER = 'audio/'


# –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
video_link_pattern = (
    r'(https?://)?(www\.)?'
    r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vimeo\.com)/\S+'
)


async def start(update: Update, context: CallbackContext) -> None:
    ''' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. '''
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    keyboard = [
        [KeyboardButton('–†–µ—Ü–µ–ø—Ç—ã'), KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ')],
        [KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã')]
    ]

    # –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        resize_keyboard=True
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å '
            '<b>—Ä–µ—Ü–µ–ø—Ç—ã</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤ <b>–¢–∏–∫–¢–æ–∫–µ</b> –∏–ª–∏ '
            '<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ</b>. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:\n\n'
            '‚ú® <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤–∏–¥–µ–æ\n'
            'üîç <b>–ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
            'üé≤ <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ</b> –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä\n\n'
            '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> üëá',
            parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=reply_markup
        )
    else:
        logger.error('update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start')


async def handle_button_click(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–†–µ—Ü–µ–ø—Ç—ã', '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å' –∏ '''
    ''' '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'. '''
    message = get_safe_message_from_update(update)
    user_text = message.text or ''

    if user_text == '–†–µ—Ü–µ–ø—Ç—ã':
        new_keyboard = [
            [KeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ')],
            [KeyboardButton('–°–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ':
        new_keyboard = [
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å':
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.'
        )

    elif user_text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã':
        new_keyboard = [
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ')],
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞:',
            reply_markup=reply_markup
        )


async def handle_button_click_recipe(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—é–¥.'''
    user_data = get_safe_user_data(context)
    logger.info(
        f'handle_button_click —Å—Ä–∞–±–æ—Ç–∞–ª. '
        f'is_editing={user_data.get("is_editing")}'
    )
    if user_data.get('is_editing'):
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É')
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        return
    message = get_safe_message_from_update(update)
    user_text = message.text or ''

    if message.from_user is None:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (from_user is None)')
        return
    user_id = message.from_user.id

    logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {user_text}'
    )

    # –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    category_map = {
        '–ó–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–°–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
        '–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
        '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = category_map.get(user_text)

    if not category:
        await message.reply_text(
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
        return
    session.expire_all()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    recipes = get_recipes_by_category_name(user_id, category, session)

    if not recipes:
        await message.reply_text(
            f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".'
        )
        return

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
    if user_text.startswith(('–°–ª—É—á–∞–π–Ω—ã–π', '–°–ª—É—á–∞–π–Ω–æ–µ')):
        await send_random_recipe(update, category, recipes)
    elif user_text.startswith('–ò–∑–º–µ–Ω–∏—Ç—å'):
        await send_recipe_list(update, context, recipes, edit=True)
    else:
        await send_recipe_list(update, context, recipes)


async def handle_recipe_pagination(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.'''
    query = get_safe_callback_query(update)
    await query.answer()

    user_data = get_safe_user_data(context)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ context.user_data
    recipes = user_data.get('recipes', [])
    # –ü—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    if not recipes:
        message = get_safe_query_message(query)
        await message.reply_text('–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—É—Å—Ç.')
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
    data = query.data
    if data is None:
        logger.warning('CallbackQuery.data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        return
    if data.startswith('next_'):
        page = int(data.split('_')[1])
    elif data.startswith('prev_'):
        page = int(data.split('_')[1])
    else:
        page = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await send_recipe_list(update, context, recipes, page=page)


async def handle_video_link(update: Update, context: CallbackContext) -> None:
    try:
        url = get_safe_text_from_update(update)
        message = get_safe_message_from_update(update)
    except ValueError as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')
        if update.message:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.'
            )
        return

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {url}')
    await message.reply_text(
        '‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...'
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    asyncio.create_task(process_video_pipeline(url, message, context))


async def process_video_pipeline(
    url: str, message: Message, context: CallbackContext
) -> None:
    try:
        await message.reply_text(
            'üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ...\n'
            '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
        )
        video_path, description = await async_download_video_and_description(
            url
        )

        if not video_path:
            await message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            )
            return

        converted_path = await async_convert_to_mp4(video_path)
        video_file_id = await send_video_to_channel(
            context, converted_path
        )
        user_data = get_safe_user_data(context)
        user_data['video_file_id'] = video_file_id
        user_data['video_path'] = converted_path

        await message.reply_text(
            '‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç...\n'
            '–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.'
        )
        audio_path = extract_audio(converted_path, AUDIO_FOLDER)
        transcript = await async_transcribe_audio(audio_path)

        await message.reply_text(
            'üß† –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç —á–µ—Ä–µ–∑ AI...\n'
            '–≠—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 20 —Å–µ–∫—É–Ω–¥, —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤!'
        )
        title, recipe, ingredients = await extract_recipe_data_async(
            description, transcript
        )

        if title and recipe:
            await send_recipe_confirmation(
                message, title, recipe, ingredients, video_file_id
            )
        else:
            await message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∏–¥–µ–æ.')

        for path in [video_path, converted_path, audio_path]:
            if path and os.path.exists(path):
                os.remove(path)

    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}')
        await message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )


async def handle_confirm_changes(
    update: Update, context: CallbackContext
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –†–µ—Ü–µ–ø—Ç' –∏ '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å'. '''
    query = get_safe_callback_query(update)
    await query.answer()

    user_id = query.from_user.id
    user_info = user_data_tempotary.get(user_id, {})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    if query.data == 'save_recipe':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
        title = user_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        new_keyboard = [
            [InlineKeyboardButton('ü•û –ó–∞–≤—Ç—Ä–∞–∫', callback_data='breakfast')],
            [InlineKeyboardButton(
                'üçù –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
                callback_data='main_course'
            )],
            [InlineKeyboardButton('ü•ó –°–∞–ª–∞—Ç', callback_data='salad')]
        ]

        reply_markup = InlineKeyboardMarkup(new_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            f'üîñ <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n\n'
            f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n',
            parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=reply_markup
        )
        logger.debug(f'–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞: {user_info}')
    elif query.data == 'discard_recipe':
        await query.edit_message_text(
            '‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.'
        )
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç.')


async def handle_category_choice(
    update: Update, context: CallbackContext
) -> None:
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î.
    '''
    query = get_safe_callback_query(update)
    await query.answer()

    user_id = query.from_user.id
    user_info = user_data_tempotary.get(user_id, {})

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username: str = query.from_user.username or ''
    first_name: str = query.from_user.first_name or ''
    last_name: str = query.from_user.last_name or ''
    created_at = datetime.now()

    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {query.data}'
    )

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = query.data  # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    category_name = ''
    if category == 'breakfast':
        category_name = '–ó–∞–≤—Ç—Ä–∞–∫'
    elif category == 'main_course':
        category_name = '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ'
    elif category == 'salad':
        category_name = '–°–∞–ª–∞—Ç'

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}')
    category_obj = add_category_if_not_exists(category_name, session)
    logger.info(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id: int = int(category_obj.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö—é.
    # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    add_user_if_not_exists(
        user_id,
        username,
        first_name,
        last_name,
        created_at,
        session
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    title = user_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    recipe = user_info.get('recipe', '–ù–µ —É–∫–∞–∑–∞–Ω')
    ingredients = user_info.get('ingredients', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')

    logger.info('–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_recipe = add_recipe(
        user_id,
        title,
        recipe,
        ingredients,
        category_id,
        session
    )
    logger.info(f'–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {new_recipe.id}')
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –∏–∑ user_data
    user_data = get_safe_user_data(context)
    video_file_id = user_data.get('video_file_id')
    logger.info(f'–ü–æ–ª—É—á–∞–µ–º video_file_id: {video_file_id}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤–∏–¥–µ–æ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if video_file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_recipe_id: int = int(new_recipe.id)
        add_video_to_recipe(new_recipe_id, video_file_id, session)

    await query.edit_message_text(
        f'‚úÖ –í–∞—à —Ä–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n'
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n'
        f'üîñ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}',
        parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )


async def handle_recipe_choice(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ —Ä–µ—Ü–µ–ø—Ç–∞. '''
    edit = False
    query = get_safe_callback_query(update)
    await query.answer()
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    callback_data = get_safe_callback_data(query)
    if callback_data.startswith('edit_recipe_'):
        recipe_id = int(callback_data.split('_')[2])
        edit = True
        keyboard = [
            [InlineKeyboardButton(
                '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                callback_data=f'redact_recipe_{recipe_id}'
            )],
            [InlineKeyboardButton(
                '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç',
                callback_data=f'delete_recipe_{recipe_id}'
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
        recipe_id = int(callback_data.split('_')[1])
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ ID –∏–∑ –±–∞–∑—ã
    session.expire_all()
    recipe = get_recipe(recipe_id, session)

    if not recipe:
        await query.edit_message_text('‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    # –ò—â–µ–º –≤–∏–¥–µ–æ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ —ç—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
    video = recipe.video
    message = cast(Message, query.message)
    if video:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_video(video.video_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ
    ingredients_text = '\n'.join(
        f'- {ingredient.name}' for ingredient in recipe.ingredients
    )
    text = (
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b> {recipe.title}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe.description}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients_text}'
    )
    await message.reply_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup if edit else None
    )


async def handle_edit_delete_recipe(
    update: Update, context: CallbackContext
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞. '''
    query = get_safe_callback_query(update)
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
    callback_data = get_safe_callback_data(query)
    recipe_id = int(callback_data.split('_')[2])

    if callback_data.startswith('redact_recipe_'):
        # –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
        await start_edit(update, context)

    elif callback_data.startswith('delete_recipe_'):
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å',
                    callback_data=f'confirm_delete_{recipe_id}'
                ),
                InlineKeyboardButton(
                    '‚ùå –ù–µ—Ç, –Ω–µ —É–¥–∞–ª—è—Ç—å',
                    callback_data=f'cancel_delete_{recipe_id}'
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç?',
            reply_markup=reply_markup
        )


async def handle_confirm_delete(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞. '''
    query = get_safe_callback_query(update)
    await query.answer()

    callback_data = get_safe_callback_data(query)
    recipe_id = int(callback_data.split('_')[2])

    if callback_data.startswith('confirm_delete_'):
        # –£–¥–∞–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
        delete_recipe(recipe_id, session)
        await query.edit_message_text('‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
    elif callback_data.startswith('cancel_delete_'):
        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        await query.edit_message_text('‚ùé –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–∞–Ω–¥–ª–µ—Ä–æ–≤
def setup_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞')
    app.add_handler(edit_recipe_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start')
    app.add_handler(CommandHandler('start', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ')
    app.add_handler(MessageHandler(
        filters.Regex(video_link_pattern) & filters.TEXT, handle_video_link
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–†–µ—Ü–µ–ø—Ç—ã', '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ' –∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫')
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(
            '^(–†–µ—Ü–µ–ø—Ç—ã|–ó–∞–≥—Ä—É–∑–∏—Ç—å|–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã)$'
        ),
        handle_button_click
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—é–¥
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(
            r'^(–ó–∞–≤—Ç—Ä–∞–∫|–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ|–°–∞–ª–∞—Ç|–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫|'
            r'–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ|–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç|–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫|'
            r'–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ|–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ª–∞—Ç)$|'
        ),
        handle_button_click_recipe
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    app.add_handler(CallbackQueryHandler(
        handle_confirm_changes,
        pattern='^(save_recipe|discard_recipe)$'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    app.add_handler(CallbackQueryHandler(
        handle_category_choice,
        pattern='^(breakfast|main_course|salad)$'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞')
    app.add_handler(CallbackQueryHandler(
        handle_recipe_choice, pattern='^recipe_|edit_recipe_'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤')
    app.add_handler(CallbackQueryHandler(
        handle_recipe_pagination, pattern='^(next|prev)_'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞')
    app.add_handler(CallbackQueryHandler(
        handle_edit_delete_recipe,
        pattern='^(redact_recipe_|delete_recipe_)'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞')
    app.add_handler(CallbackQueryHandler(
        handle_confirm_delete,
        pattern='^(confirm_delete_|cancel_delete_)'
    ))
