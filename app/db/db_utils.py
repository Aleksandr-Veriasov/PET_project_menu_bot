import logging
from datetime import datetime
from typing import List, Optional

from sqlalchemy.orm import Session

from app.db.models import (
    Category,
    Ingredient,
    Recipe,
    RecipeIngredient,
    User,
    Video
)

logger = logging.getLogger(__name__)


def add_user_if_not_exists(
        user_id: int,
        username: str,
        first_name: str,
        last_name: str,
        created_at: datetime,
        session: Session
) -> None:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ. '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
        user = session.get(User, user_id)

        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            new_user = User(
                id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                created_at=created_at
            )
            session.add(new_user)
            session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    except Exception as e:
        session.rollback()  # üîÅ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')


def add_recipe(
        user_id: int,
        title: str,
        recipe: str,
        ingredients: str,
        category_id: int,
        session: Session
) -> Recipe:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞. '''
    created_at = datetime.now()
    new_recipe = Recipe(
        user_id=user_id,
        title=title,
        description=recipe,
        created_at=created_at,
        category_id=category_id
    )
    session.add(new_recipe)
    session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ –∫–æ–º–º–∏—Ç–∞
    session.refresh(new_recipe)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_id: int = int(new_recipe.id)
    # –ü–∞—Ä—Å–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients_lst: list = parse_ingredients(ingredients)

    try:
        for ingredient in ingredients_lst:
            add_ingredient_and_associate_with_recipe(
                recipe_id,
                ingredient,
                session
            )
    except Exception as e:
        session.rollback()
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: {e}')
        raise
    session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    return new_recipe


def parse_ingredients(text: str) -> list:
    '''
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
    '''
    logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤...')
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    lines: list = text.strip().split('\n')
    ingredients: list = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

    logger.debug(f'–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}')
    logger.debug(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}')
    logger.debug(f'–°—Ç—Ä–æ–∫–∏: {lines}')

    for line_number, line in enumerate(lines, 1):
        logger.debug(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {line_number}: {line}')

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        stripped_line: str = line.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞—Ä–∫–µ—Ä–∞ '- ', —Ç–æ —ç—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        if stripped_line.startswith('- '):
            # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä '- ' –∏ –ø—Ä–æ–±–µ–ª—ã
            ingredient_name: str = stripped_line[2:].strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if ingredient_name:
                ingredients.append(ingredient_name)

    logger.debug(f'–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(ingredients)}')

    return ingredients


def add_ingredient_and_associate_with_recipe(
        recipe_id: int, name: str, session: Session
) -> Ingredient:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∑—ã–≤–∞–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º. '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        ingredient = session.query(Ingredient).filter_by(name=name).first()

        if not ingredient:
            ingredient = Ingredient(name=name)
            session.add(ingredient)
            session.flush()  # –≤—ã–∑—ã–≤–∞–µ—Ç insert

        recipe_ingredient = RecipeIngredient(
            recipe_id=recipe_id,
            ingredient_id=ingredient.id
        )
        session.add(recipe_ingredient)
        session.commit()

        return ingredient

    except Exception as e:
        session.rollback()
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ "{name}": {e}')
        raise


def add_video_to_recipe(
    recipe_id: int, video_url: str, session: Session
) -> None:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫ —Ä–µ—Ü–µ–ø—Ç—É. '''
    try:
        video = Video(recipe_id=recipe_id, video_url=video_url)
        session.add(video)
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –∫ —Ä–µ—Ü–µ–ø—Ç—É: {e}')
        raise


def add_category_if_not_exists(
    category_name: str, session: Session
) -> Category:
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    '''
    try:
        category = (
            session.query(Category).filter_by(name=category_name).first()
        )

        if not category:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            category = Category(name=category_name)
            session.add(category)
            session.commit()
            logger.info(
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.'
            )

        return category
    except Exception as e:
        session.rollback()
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}": {e}')
        raise


def get_recipe(recipe_id: int, session: Session) -> Optional[Recipe]:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID. '''
    try:
        recipe = session.query(Recipe).filter_by(id=recipe_id).first()
        return recipe
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Å ID {recipe_id}: {e}')
        return None


def get_recipes_by_category_name(
    user_id: int, category_name: str, session: Session
) -> List[Recipe]:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '''
    try:
        # –ü–æ–ª—É—á–∞–µ–º category_id –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = (
            session.query(Category).filter_by(name=category_name).first()
        )

        if not category:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            logger.warning(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return []

        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ category_id
        recipes = session.query(Recipe).filter_by(
            user_id=user_id,
            category_id=category.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π category_id
        ).all()

        return recipes
    except Exception as e:
        logger.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è '
            f'–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}": {e}'
        )
        return []


def delete_recipe(recipe_id: int, session: Session) -> None:
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID. '''
    try:
        recipe = session.query(Recipe).filter_by(id=recipe_id).first()
        if recipe:
            session.delete(recipe)
            session.commit()
            logger.info(f'–†–µ—Ü–µ–ø—Ç —Å ID {recipe_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.')
        else:
            logger.warning(f'–†–µ—Ü–µ–ø—Ç —Å ID {recipe_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return None

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}', exc_info=True)
        session.rollback()
