import asyncio
import logging

from sqlalchemy.orm import close_all_sessions
from telegram.ext import Application

from app.utils.logging_config import setup_logging
from app.core.settings import settings
from app.db.db import db
from app.db.models import Base
from app.handlers.setup import setup_handlers
from app.media.video_downloader import cleanup_old_videos

setup_logging()
logger = logging.getLogger(__name__)
cleanup_task: asyncio.Task | None = None


def initialize_database() -> None:
    '''–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.'''
    engine = db.engine
    Base.metadata.create_all(bind=engine)
    logger.info('üì¶ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')


def create_app() -> Application:
    if not settings.telegram_token:
        raise ValueError('‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.')

    async def on_startup(app: Application):
        global cleanup_task
        logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ...')
        cleanup_task = asyncio.create_task(cleanup_old_videos())

    async def on_shutdown(app: Application):
        global cleanup_task
        if cleanup_task and not cleanup_task.done():
            logger.info('‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...')
            cleanup_task.cancel()
            try:
                await cleanup_task
            except asyncio.CancelledError:
                logger.info('‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

        logger.info('üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ SQLAlchemy-—Å–µ—Å—Å–∏–∏...')
        close_all_sessions()

    app = (
        Application.builder()
        .token(settings.telegram_token)
        .post_init(on_startup)
        .post_shutdown(on_shutdown)
        .build()
    )

    setup_handlers(app)
    initialize_database()

    return app


if __name__ == '__main__':
    try:
        app = create_app()
        logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...')
        app.run_polling()
    except Exception as e:
        logger.exception(f'üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')
