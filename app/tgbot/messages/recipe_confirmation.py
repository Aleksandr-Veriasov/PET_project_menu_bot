import logging
from html import escape
from typing import Iterable

from telegram import Message
from telegram.constants import ParseMode

from app.tgbot.keyboards.inlines import keyboard_save_recipe
from app.types import PTBContext

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


def _fmt_ingredients(ingredients: str | Iterable[str]) -> str:
    if isinstance(ingredients, str):
        return ingredients.strip()
    return '\n'.join(f'‚Ä¢ {escape(str(x))}' for x in ingredients)


async def send_recipe_confirmation(
    message: Message,
    context: PTBContext,
    title: str,
    recipe: str,
    ingredients: str | Iterable[str],
    video_file_id: str,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–¥–µ–æ (–ø–æ file_id) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    –∫–ª–∞–¥—ë–º –≤ context.user_data.
    """
    if message.from_user is None:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (from_user is None)')
        return

    context.user_data["recipe_draft"] = {
        'title': title,
        'recipe': recipe,
        'video_file_id': video_file_id,
        'ingredients': list(ingredients) if not isinstance(
            ingredients, str
        ) else ingredients,
    }

    # 1) –í–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å file_id)
    if video_file_id:
        try:
            logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å file_id: %s', video_file_id)
            await message.reply_video(
                video_file_id, allow_sending_without_reply=True
            )
            logger.info('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        except Exception as e:
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s', e, exc_info=True)
            # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç

    # 2) –¢–µ–∫—Å—Ç (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è)
    title_html = escape(title).strip() or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    recipe_html = escape(recipe).strip() or '‚Äî'
    ingr_html = _fmt_ingredients(ingredients)

    text = (
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title_html}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe_html}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingr_html}\n\n'
    )

    try:
        # –ü–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ ‚Äî —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_save_recipe(),
            disable_web_page_preview=True,
        )
        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    except Exception as e:
        logger.error(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞: %s', e, exc_info=True
        )
