import logging
import asyncio
from html import escape
from typing import Iterable, Optional
from contextlib import suppress
from telegram.error import TimedOut, NetworkError
from telegram import Message
from telegram.constants import ParseMode

from app.tgbot.keyboards.inlines import keyboard_save_recipe
from app.types import PTBContext

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


def _fmt_ingredients(ingredients: str | Iterable[str]) -> str:
    if isinstance(ingredients, str):
        return ingredients.strip()
    return '\n'.join(f'‚Ä¢ {escape(str(x))}' for x in ingredients)


async def send_recipe_confirmation(
    message: Message,
    context: PTBContext,
    title: str,
    recipe: str,
    ingredients: str | Iterable[str],
    video_file_id: str,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–¥–µ–æ (–ø–æ file_id) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    –∫–ª–∞–¥—ë–º –≤ context.user_data.
    """
    if message.from_user is None:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (from_user is None)')
        return

    context.user_data["recipe_draft"] = {
        'title': title,
        'recipe': recipe,
        'video_file_id': video_file_id,
        'ingredients': list(ingredients) if not isinstance(
            ingredients, str
        ) else ingredients,
    }
    video_msg = None
    logger.info(
        f'video_file_id = {video_file_id} ,title = {title},'
    )
    # 1) –í–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å file_id) ‚Äî –∂–¥—ë–º –¥–æ 10 —Å–µ–∫
    if video_file_id:
        logger.info(
            "–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (file_id=%s)", video_file_id
        )
        video_msg = await send_video_with_wait(
            message, video_file_id, total_timeout=10.0, check_interval=2.0
        )

    # 2) –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∏ ‚Äî –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if video_msg is None and video_file_id:
        await message.reply_text(
            "‚ö†Ô∏è –í–∏–¥–µ–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ, –Ω–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. "
            "–ù–∏–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞.",
        )

    # 3) –¢–µ–∫—Å—Ç (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è)
    title_html = escape(title).strip() or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    recipe_html = escape(recipe).strip() or '‚Äî'
    ingr_html = _fmt_ingredients(ingredients)

    text = (
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title_html}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe_html}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingr_html}\n\n'
    )

    try:
        # –ü–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ ‚Äî —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_save_recipe(),
            disable_web_page_preview=True,
        )
        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    except Exception as e:
        logger.error(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞: %s', e, exc_info=True
        )


async def _try_reply_video(
        message: Message, file_id: str
) -> Optional[Message]:
    """
    –ï–¥–∏–Ω–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ file_id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Message –∏–ª–∏ None.
    """
    try:
        # timeouts –º–æ–∂–Ω–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return await message.reply_video(
            video=file_id,
            allow_sending_without_reply=True,
            read_timeout=60,   # —á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç Bot API
            connect_timeout=30,
            pool_timeout=30,
        )
    except (TimedOut, NetworkError) as e:
        logger.warning("Timeout/Network –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s", e)
        return None
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: %s", e, exc_info=True)
        return None


async def send_video_with_wait(
    message: Message,
    file_id: str,
    *,
    total_timeout: float = 10.0,
    check_interval: float = 2.0,
) -> Optional[Message]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –∏ –∂–¥—ë—Ç –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ total_timeout
    —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥—ã–µ check_interval. –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∏ ‚Äî –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    task = asyncio.create_task(_try_reply_video(message, file_id))
    remaining = total_timeout
    try:
        while remaining > 0:
            try:
                return await asyncio.wait_for(
                    task, timeout=min(check_interval, remaining)
                )
            except asyncio.TimeoutError:
                remaining -= check_interval
                # –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º –¥–∞–ª—å—à–µ
                continue
        # –¥–µ–¥–ª–∞–π–Ω: –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ ¬´–≤–¥–æ–≥–æ–Ω–∫—É¬ª
        if not task.done():
            task.cancel()
            with suppress(asyncio.CancelledError):
                await task
        return None
    finally:
        # –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å ‚Äî –≤—Å—ë –æ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
