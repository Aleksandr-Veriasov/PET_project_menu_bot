import asyncio
import logging
from contextlib import suppress
from typing import List, Tuple

from telegram import Update
from telegram.constants import ParseMode
from telegram.error import BadRequest

from app.db.repository import (
    CategoryRepository, RecipeRepository, VideoRepository
)
from app.tgbot.context_helpers import get_db
from app.tgbot.keyboards.inlines import (
    _CB_RE,
    build_recipes_list_keyboard,
    category_keyboard,
    choice_recipe_keyboard,
    home_keyboard,
    recipe_edit_keyboard,
)
from app.tgbot.message_utils import random_recipe
from app.tgbot.recipes_modes import RecipeMode
from app.types import PTBContext

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

CATEGORY_DICT = {
    'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
    'main': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
    'salad': '–°–∞–ª–∞—Ç',
}


async def upload_recipe(update: Update, context: PTBContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload_recipe."""
    cq = update.callback_query
    await cq.answer()
    if cq.message:
        await cq.message.edit_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º.',
            reply_markup=home_keyboard(),
            parse_mode=ParseMode.HTML
        )


async def recipes_menu(update: Update, context: PTBContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç—ã'.
    Entry-point: recipe, recipe_random, recipe_edit.
    """
    cq = update.callback_query
    if not cq:
        return

    await cq.answer()

    data = cq.data or ""
    logger.info(f'‚è© –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫: {data}')
    if data == RecipeMode.RANDOM:
        mode = RecipeMode.RANDOM
        text = "üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –±–ª—é–¥–æ–º:"
    elif data == RecipeMode.EDIT:
        mode = RecipeMode.EDIT
        text = "üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –±–ª—é–¥–æ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    else:
        mode = RecipeMode.DEFAULT
        text = "üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

    markup = category_keyboard(mode)

    if cq.message:
        try:
            await cq.message.edit_text(
                text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=category_keyboard(mode),
            )
        except BadRequest as e:
            if "message is not modified" in str(e).lower():
                with suppress(BadRequest):
                    await cq.message.edit_reply_markup(reply_markup=markup)
            else:
                raise


async def recipes_from_category(update: Update, context: PTBContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    Entry-point: r'^(?:breakfast|main|salad)_recipes(?:_(?:random|edit))?$'
    """
    cq = update.callback_query
    if not cq:
        return
    await cq.answer()

    data = cq.data or ''
    m = _CB_RE.match(data)
    if not m:
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫
        return

    category_slug = m.group('category')  # breakfast|main|salad
    mode = (m.group('mode') or 'default')  # default|random|edit
    category_name = CATEGORY_DICT.get(
        category_slug, category_slug.capitalize()
    )

    user_id = cq.from_user.id
    db = get_db(context)

    # RANDOM ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–±–µ–∑ user_data)
    if mode == 'random':
        with db.session() as session:
            video_url, text = await asyncio.to_thread(
                random_recipe, session, user_id, category_name
            )

        if cq.message:
            if not text:
                await cq.message.edit_text(
                    'üëâ üçΩ –ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à —Ä–µ—Ü–µ–ø—Ç, '
                    '–∫–æ–≥–¥–∞ –≤—ã —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.',
                    reply_markup=home_keyboard()
                )
                return
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫–∞–∫ —É —Ç–µ–±—è)
            # await cq.message.reply_video(video_url)
            await cq.message.reply_text(
                text, parse_mode=ParseMode.HTML, disable_web_page_preview=True,
                reply_markup=home_keyboard(),
            )
        return

    # DEFAULT/EDIT ‚Äî –≤—ã—Ç—è–≥–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∫–ª–∞–¥—ë–º –≤ user_data
    with db.session() as session:
        category_id = CategoryRepository.get_id_by_name(session, category_name)
        # –æ–∂–∏–¥–∞–µ–º –õ–Å–ì–ö–ò–ô —Å–ø–∏—Å–æ–∫ [(id, title)]
        pairs: List[Tuple[int, str]] = (
            RecipeRepository.get_all_recipes_ids_and_titles(
                session, user_id, category_id
                )
            )

    if not pairs:
        if cq.message:
            await cq.message.edit_text(
                f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª.',
                reply_markup=home_keyboard()
            )
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ user_data
    state = context.user_data
    state['recipes_items'] = pairs  # [(id, title)]
    state['recipes_page'] = 0
    state['recipes_per_page'] = 5
    state['recipes_total_pages'] = (
        len(pairs) + state['recipes_per_page'] - 1
    ) // state['recipes_per_page']
    state['is_editing'] = (mode == 'edit')
    state['category_name'] = category_name
    state['category_slug'] = category_slug

    # —Ä–∏—Å—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    markup = build_recipes_list_keyboard(
        pairs, page=0, per_page=state['recipes_per_page'],
        edit=state['is_editing'], category_slug=category_slug
    )

    if cq.inline_message_id:
        await context.bot.edit_message_text(
            text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª:',
            inline_message_id=cq.inline_message_id,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=markup
        )
    elif cq.message:
        try:
            await cq.message.edit_text(
                f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª:',
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=markup
            )
        except BadRequest as e:
            if 'message is not modified' in str(e).lower():
                with suppress(BadRequest):
                    await cq.message.edit_reply_markup(reply_markup=markup)
            else:
                raise


async def recipe_choice(
    update: Update, context: PTBContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞.
    Entry-point: r'^(?:breakfast|main|salad)_(?:recipe|edit_recipe)+$'
    """
    cq = update.callback_query
    if not cq:
        return

    await cq.answer()

    data = cq.data or ''
    category_slug = data.split('_', 1)[0]  # breakfast|main|salad
    logger.info(f'üóë {category_slug} - category_slug')
    state = context.user_data
    page = state.get('recipes_page', 0)
    if data.startswith(f'{category_slug}_edit_recipe_'):
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_id = int(data.split('_')[3])
        keyboard = recipe_edit_keyboard(recipe_id, page)
    else:
        recipe_id = int(data.split('_')[2])
        keyboard = choice_recipe_keyboard(page)

    db = get_db(context)
    with db.session() as session:
        recipe = RecipeRepository.get_by_id(session, recipe_id)
        if not recipe:
            await cq.message.edit_text('‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        video_url = VideoRepository.get_video_url(session, recipe.id)
        if not video_url:
            video_url = None
        ingredients_text = '\n'.join(
            f'- {ingredient.name}' for ingredient in recipe.ingredients
        )
        text = (
            f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b> {recipe.title}\n\n'
            f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe.description}\n\n'
            f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients_text}'
        )
        # if video_url:
        #     await cq.message.reply_video(video_url)

        await cq.message.reply_text(
            text, parse_mode=ParseMode.HTML, disable_web_page_preview=True,
            reply_markup=keyboard
        )
