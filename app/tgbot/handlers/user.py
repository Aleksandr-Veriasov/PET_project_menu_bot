from __future__ import annotations

import asyncio
import logging
from typing import Tuple

from telegram import Update

from app.db.models import User
from app.db.repository import RecipeRepository, UserRepository
from app.db.schemas import UserCreate
from app.tgbot.context_helpers import get_db
from app.tgbot.keyboards.inlines import help_keyboard, start_keyboard
from app.types import PTBContext

logger = logging.getLogger(__name__)


START_TEXT_NEW_USER = (
    '–ü—Ä–∏–≤–µ—Ç {user.first_name}! üëã –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ '
    '—Å–æ—Ö—Ä–∞–Ω—è—Ç—å '
    '<b>—Ä–µ—Ü–µ–ø—Ç—ã</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤ <b>–¢–∏–∫–¢–æ–∫–µ</b> –∏–ª–∏ '
    '<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ</b>. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:\n\n'
    '‚ú® <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤–∏–¥–µ–æ\n'
    'üîç <b>–ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
    'üé≤ <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ</b> –∏–∑ –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–æ–∫\n'
    'üì© <b>–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É '
    '–Ω–∞ Reels –∏–ª–∏ TikTok.\n\n'
    '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> üëá'
)

START_TEXT_USER = (
    '–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n'
    '‚Ä¢ <b>–†–µ—Ü–µ–ø—Ç—ã</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n'
    '‚Ä¢ <b>–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n'
    '‚Ä¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç\n'
    '‚Ä¢ <b>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º\n'
)

HELP_TEXT = (
    'ü§ñ <b>SmartMenuBot</b> ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ '
    'TikTok –∏ Reels!\n\n'
    '<b>üìå –ß—Ç–æ —è —É–º–µ—é:</b>\n'
    '‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤–∏–¥–µ–æ\n'
    '‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —Å–∞–ª–∞—Ç)\n'
    '‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö\n'
    '‚Ä¢ –ü–æ–∑–≤–æ–ª—è—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã\n\n'
    '<b>üõ† –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n'
    '1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok –∏–ª–∏ Instagram Reels\n'
    '   ‚Äî —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ —Å–æ—Ö—Ä–∞–Ω—é —Ä–µ—Ü–µ–ø—Ç\n'
    '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n'
    '   ‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫\n'
    '   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ\n'
    '   ‚Ä¢ –°–∞–ª–∞—Ç\n'
    '3Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ:\n'
    '   ‚Ä¢ üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
    '   ‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n'
    '   ‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç\n'
    '   ‚Ä¢ üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n\n'
    '<b>üí¨ –ö–æ–º–∞–Ω–¥—ã:</b>\n'
    '/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
    '/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n'
    '<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è! üçΩ</i>'
)


async def user_start(update: Update, context: PTBContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    tg_user = update.effective_user
    if not tg_user:
        logger.error('update.effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start')
        return

    db = get_db(context)

    def _ensure_user_and_count() -> Tuple[User, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
        with db.session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            user = session.get(User, tg_user.id)
            if user is None:
                # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                payload = UserCreate(
                    id=tg_user.id,
                    username=tg_user.username,
                    first_name=tg_user.first_name,
                    last_name=tg_user.last_name,
                )
                user = UserRepository.create(session, payload)
            recipe_count = RecipeRepository.get_count_by_user(session, user.id)
            return user, recipe_count

    user, count = await asyncio.to_thread(_ensure_user_and_count)

    new_user = True if count == 0 else False
    text_new_user = START_TEXT_NEW_USER.format(user=user)
    text = text_new_user if new_user else START_TEXT_USER
    keyboard = start_keyboard(new_user)

    cq = update.callback_query
    if cq:
        await cq.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Ä—è–¥–æ–º
        if cq.message:
            await cq.message.edit_text(
                text, reply_markup=keyboard, parse_mode='HTML',
            )
        return
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query, —Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = update.effective_message
    if msg:
        await msg.reply_text(
            text, reply_markup=keyboard, parse_mode='HTML',
        )


async def user_help(update: Update, context: PTBContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–º–æ—â—å¬ª."""
    # 1) –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–º–æ—â—å¬ª
    if update.callback_query:
        cq = update.callback_query
        await cq.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Ä—è–¥–æ–º
        if cq.message:
            await cq.message.edit_text(
                HELP_TEXT, parse_mode='HTML', disable_web_page_preview=True,
                reply_markup=help_keyboard()
            )
        return

    # 2) –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /help –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = update.effective_message
    if msg:
        await msg.reply_text(
            HELP_TEXT, parse_mode='HTML', disable_web_page_preview=True,
            reply_markup=help_keyboard()
        )
