import asyncio
import logging
import os

from telegram import Message, Update
from telegram.ext import CallbackContext

from app.api.deepseek_api import extract_recipe_data_async
from app.media.audio_extractor import extract_audio
from app.media.speech_recognition import async_transcribe_audio
from app.media.video_downloader import (
    async_convert_to_mp4,
    async_download_video_and_description,
    send_video_to_channel,
)
from app.utils.helpers import (
    get_safe_message_from_update,
    get_safe_text_from_update,
    get_safe_user_data,
)
from app.utils.message_utils import send_recipe_confirmation

AUDIO_FOLDER = 'audio/'
logger = logging.getLogger(__name__)


async def handle_video_link(update: Update, context: CallbackContext) -> None:
    try:
        url = get_safe_text_from_update(update)
        message = get_safe_message_from_update(update)
    except ValueError as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')
        if update.message:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.'
            )
        return

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {url}')
    await message.reply_text('‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...')
    asyncio.create_task(process_video_pipeline(url, message, context))


async def process_video_pipeline(
    url: str, message: Message, context: CallbackContext
) -> None:
    try:
        await message.reply_text(
            'üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ...\n'
            '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
        )
        video_path, description = await async_download_video_and_description(
            url
        )
        if not video_path:
            await message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            )
            return

        converted_path = await async_convert_to_mp4(video_path)
        video_file_id = await send_video_to_channel(context, converted_path)

        user_data = get_safe_user_data(context)
        user_data['video_file_id'] = video_file_id
        user_data['video_path'] = converted_path

        await message.reply_text(
            '‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç...\n'
            '–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.'
        )
        audio_path = extract_audio(converted_path, AUDIO_FOLDER)
        transcript = await async_transcribe_audio(audio_path)

        await message.reply_text(
            'üß† –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç —á–µ—Ä–µ–∑ AI...\n'
            '–≠—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 20 —Å–µ–∫—É–Ω–¥, —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤!'
        )
        title, recipe, ingredients = await extract_recipe_data_async(
            description, transcript
        )

        if title and recipe:
            await send_recipe_confirmation(
                message, title, recipe, ingredients, video_file_id
            )
        else:
            await message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∏–¥–µ–æ.')

    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}')
        await message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
        )

    finally:
        for path in [video_path, converted_path, audio_path]:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                except Exception as e:
                    logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}: {e}')
