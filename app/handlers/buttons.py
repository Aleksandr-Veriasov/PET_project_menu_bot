import logging
from datetime import datetime

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import CallbackContext, ContextTypes

from app.db.db import db
from app.db.db_utils import add_user_if_not_exists, get_recipes_by_category_name
from app.utils.helpers import (
    get_safe_callback_query,
    get_safe_message_from_update,
    get_safe_user_data,
)
from app.utils.message_utils import send_random_recipe, send_recipe_list
from app.utils.state import user_data_tempotary

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


async def handle_button_click(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–†–µ—Ü–µ–ø—Ç—ã', '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ', '–ó–∞–≥—Ä—É–∑–∏—Ç—å' –∏
    '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'.
    '''
    user_data = get_safe_user_data(context)
    user_data['is_editing'] = False
    message = get_safe_message_from_update(update)
    user_text = message.text or ''

    if user_text == '–†–µ—Ü–µ–ø—Ç—ã':
        new_keyboard = [
            [KeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ')],
            [KeyboardButton('–°–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ':
        new_keyboard = [
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å':
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.'
        )

    elif user_text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã':
        new_keyboard = [
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ')],
            [KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞:',
            reply_markup=reply_markup
        )


async def handle_button_click_recipe(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—é–¥.'''
    user_data = get_safe_user_data(context)
    user_data['is_editing'] = False
    logger.info(
        f'handle_button_click —Å—Ä–∞–±–æ—Ç–∞–ª. '
        f'is_editing={user_data.get("is_editing")}'
    )
    if user_data.get('is_editing'):
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É')
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        return
    message = get_safe_message_from_update(update)
    user_text = message.text or ''

    if message.from_user is None:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (from_user is None)')
        return

    tg_user = message.from_user
    user_id: int = tg_user.id
    username: str = tg_user.username or ''
    first_name: str = tg_user.first_name or ''
    last_name: str = tg_user.last_name or ''
    created_at = datetime.now()

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {user_text}')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    with db.session() as session:
        try:
            add_user_if_not_exists(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                created_at=created_at,
                session=session,
            )
        except Exception as e:
            session.rollback()
            logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
            await message.reply_text(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
            )
            return

    # –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    category_map = {
        '–ó–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–°–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
        '–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
        '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
        '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        '–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = category_map.get(user_text)

    if not category:
        await message.reply_text(
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
        return
    with db.session() as session:
        try:
            recipes = get_recipes_by_category_name(user_id, category, session)

            if not recipes:
                await message.reply_text(
                    f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".'
                )
                return

            if user_text.startswith(('–°–ª—É—á–∞–π–Ω—ã–π', '–°–ª—É—á–∞–π–Ω–æ–µ')):
                await send_random_recipe(update, category, recipes)
            elif user_text.startswith('–ò–∑–º–µ–Ω–∏—Ç—å'):
                await send_recipe_list(update, context, recipes, edit=True)
            else:
                await send_recipe_list(update, context, recipes)

        except Exception as e:
            session.rollback()
            logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}')
            await message.reply_text(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤. '
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )


async def handle_confirm_changes(
    update: Update, context: CallbackContext
) -> None:
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –†–µ—Ü–µ–ø—Ç' –∏ '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å'. '''
    query = get_safe_callback_query(update)
    await query.answer()

    user_id = query.from_user.id
    user_info = user_data_tempotary.get(user_id, {})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    if query.data == 'save_recipe':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
        title = user_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        new_keyboard = [
            [InlineKeyboardButton('ü•û –ó–∞–≤—Ç—Ä–∞–∫', callback_data='breakfast')],
            [InlineKeyboardButton(
                'üçù –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
                callback_data='main_course'
            )],
            [InlineKeyboardButton('ü•ó –°–∞–ª–∞—Ç', callback_data='salad')]
        ]

        reply_markup = InlineKeyboardMarkup(new_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            f'üîñ <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n\n'
            f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n',
            parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=reply_markup
        )
        logger.debug(f'–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞: {user_info}')
    elif query.data == 'discard_recipe':
        await query.edit_message_text(
            '‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.'
        )
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç.')
