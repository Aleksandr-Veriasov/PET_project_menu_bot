import logging
import random

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Message, Update
from telegram.ext import ContextTypes

from app.db.models import Recipe
from app.utils.helpers import get_safe_message_from_update, get_safe_user_data
from app.utils.state import user_data_tempotary

logger = logging.getLogger(__name__)

RECIPES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


async def send_recipe_confirmation(
        message: Message,
        title: str,
        recipe: str,
        ingredients: str,
        video_file_id: str,
):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è
    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    '''
    if message.from_user is None:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (from_user is None)')
        return
    user_id = message.from_user.id
    user_data_tempotary[user_id] = {
        'title': title,
        'recipe': recipe,
        'ingredients': ingredients
    }

    keyboard = [
        [InlineKeyboardButton(
            '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç',
            callback_data='save_recipe'
        )],
        [InlineKeyboardButton(
            '‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç',
            callback_data='discard_recipe'
        )]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å file_id
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å file_id: {video_file_id}')
    await message.reply_video(video_file_id)
    logger.info('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
    await message.reply_text(
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n',
        parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        reply_markup=reply_markup
    )
    logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')


async def send_random_recipe(
    update: Update, category: str, recipes: list[Recipe]
) -> None:
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'''
    random_recipe = random.choice(recipes)
    video = random_recipe.video
    message = get_safe_message_from_update(update)

    if video:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_video(video.video_url)

    ingredients_text = '\n'.join(
        f'- {ingredient.name}' for ingredient in random_recipe.ingredients
    )

    text = (
        f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":\n\n'
        f'üçΩ *{random_recipe.title}*\n\n'
        f'üìù {random_recipe.description}\n\n'
        f'ü•¶ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients_text}'
    )

    await message.reply_text(text, parse_mode='Markdown')


async def send_recipe_list(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    recipes: list[Recipe],
    page=0,
    edit=False
):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é.'''
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ context.user_data
    user_data = get_safe_user_data(context)
    user_data['recipes'] = recipes

    recipes_per_page = RECIPES_PER_PAGE
    start = page * recipes_per_page
    end = start + recipes_per_page
    current_recipes = recipes[start:end]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = [
        [InlineKeyboardButton(
            str(recipe.title),
            callback_data=(
                f'edit_recipe_{recipe.id}' if edit else f'recipe_{recipe.id}'
            )
        )] for recipe in current_recipes
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ', –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Ä–µ—Ü–µ–ø—Ç—ã
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}')
    if end < len(recipes):
        keyboard.append(
            [InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data=f'next_{page + 1}')]
        )
        logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ".')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        keyboard.append(
            [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'prev_{page - 1}')]
        )
        logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥".')
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = get_safe_message_from_update(update)
    if message:
        await message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:',
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:',
            reply_markup=reply_markup
        )
