import logging
import os
from datetime import datetime
import random

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters
)

from audio_extractor import extract_audio
from db_utils import (
    add_category_if_not_exists,
    add_recipe,
    add_user_if_not_exists,
    add_video_to_recipe,
    get_recipe,
    get_recipes_by_category_name,
)
from deepseek_api import extract_recipe_data_with_deepseek
from speech_recognition import transcribe_audio
from video_downloader import (
    convert_to_mp4,
    download_video_and_description,
    send_video_to_channel,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
user_data = {}

# –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
video_link_pattern = (
    r'(https?://)?(www\.)?'
    r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vimeo\.com)/\S+'
)


async def start(update: Update, context: CallbackContext):
    ''' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. '''
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    keyboard = [
        [KeyboardButton('–†–µ—Ü–µ–ø—Ç—ã')],
        [KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ')],
        [KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å')]
    ]

    # –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        resize_keyboard=True
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å '
        '<b>—Ä–µ—Ü–µ–ø—Ç—ã</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤ <b>–¢–∏–∫–¢–æ–∫–µ</b> –∏–ª–∏ '
        '<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ</b>. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:\n\n'
        '‚ú® <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –≤–∏–¥–µ–æ\n'
        'üîç <b>–ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã</b> –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º\n'
        'üé≤ <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ</b> –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> üëá',
        parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        reply_markup=reply_markup
    )


async def handle_button_click(update, context):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–†–µ—Ü–µ–ø—Ç—ã', '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ' –∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'. '''
    user_text = update.message.text

    if user_text == '–†–µ—Ü–µ–ø—Ç—ã':
        new_keyboard = [
            [KeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ')],
            [KeyboardButton('–°–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await update.message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ':
        new_keyboard = [
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ')],
            [KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç')]
        ]
        reply_markup = ReplyKeyboardMarkup(new_keyboard, resize_keyboard=True)
        await update.message.reply_text(
            'üîñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            reply_markup=reply_markup
        )

    elif user_text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å':
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.'
        )


async def handle_button_click_recipe(update, context):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—é–¥. '''
    user_text = update.message.text
    user_id = update.message.from_user.id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")

    if user_text in ['–ó–∞–≤—Ç—Ä–∞–∫', '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ', '–°–∞–ª–∞—Ç']:
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {user_text}")
        recipes = get_recipes_by_category_name(user_id, user_text)

        if not recipes:
            await update.message.reply_text(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.'
            )
            return

        keyboard = []
        for recipe in recipes:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            keyboard.append([InlineKeyboardButton(
                recipe.title,
                callback_data=f'recipe_{recipe.id}'
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:',
            reply_markup=reply_markup
        )

    elif user_text in [
        '–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫',
        '–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ',
        '–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç'
    ]:
        category_map = {
            '–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫': '–ó–∞–≤—Ç—Ä–∞–∫',
            '–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ': '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
            '–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç'
        }

        category = category_map.get(user_text)

        if category:
            recipes = get_recipes_by_category_name(user_id, category)

            if not recipes:
                await update.message.reply_text(
                    f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".'
                )
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            random_recipe = random.choice(recipes)

            await update.message.reply_text(
                f"–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
                f"üçΩ **{random_recipe.title}**\n\n"
                f"üìù {random_recipe.description}\n\n"
                f"ü•¶ **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:** {', '.join([ingredient.name for ingredient in random_recipe.ingredients])}"
            )
        else:
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



async def handle_video_link(update: Update, context: CallbackContext):
    ''' –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. '''
    logging.info('–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: %s', update.message.text)
    try:
        url = update.message.text
        await update.message.reply_text(
            'üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...'
        )

        video_path, description = download_video_and_description(url)
        if not video_path:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.'
            )
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        converted_video_path = convert_to_mp4(video_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –≤ user_data
        context.user_data['video_path'] = converted_video_path

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
        video_file_id = await send_video_to_channel(
            update,
            context,
            converted_video_path
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ user_data
        context.user_data['video_file_id'] = video_file_id

        await update.message.reply_text(
            '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!\n'
            '–†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ...'
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ**
        audio_path = extract_audio(converted_video_path)
        recognized_text = transcribe_audio(audio_path)

        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å) –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        # –≤ DeepSeek API
        await update.message.reply_text(
            'ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ AI...'
        )
        title, recipe, ingredients = extract_recipe_data_with_deepseek(
            description,
            recognized_text
        )

        if title and recipe and ingredients:
            await send_recipe_confirmation(
                update,
                title,
                recipe,
                ingredients,
                video_file_id
            )
        else:
            await update.message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞.'
            )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for file in [video_path, converted_video_path, audio_path]:
            if os.path.exists(file):
                os.remove(file)

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ: {e}')
        await update.message.reply_text(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


async def send_recipe_confirmation(
        update,
        title,
        recipe,
        ingredients,
        video_file_id
):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è
    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    '''
    logging.info('–ö–Ω–æ–ø–∫–∏ –ø–æ—è–≤–∏–ª–∏—Å—å')
    user_id = update.message.from_user.id
    user_data[user_id] = {
        'title': title,
        'recipe': recipe,
        'ingredients': ingredients
    }

    keyboard = [
        [InlineKeyboardButton(
            '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç',
            callback_data='save_recipe'
        )],
        [InlineKeyboardButton(
            '‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç',
            callback_data='discard_recipe'
        )]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å file_id
    await update.message.reply_video(video_file_id)

    await update.message.reply_text(
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n',
        parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        reply_markup=reply_markup
    )


async def handle_confirm_changes(update, context):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –†–µ—Ü–µ–ø—Ç' –∏ '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å'. '''
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_info = user_data.get(user_id, {})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    if query.data == 'save_recipe':
        logging.info('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
        title = user_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        new_keyboard = [
            [InlineKeyboardButton('ü•û –ó–∞–≤—Ç—Ä–∞–∫', callback_data='breakfast')],
            [InlineKeyboardButton(
                'üçù –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
                callback_data='main_course'
            )],
            [InlineKeyboardButton('ü•ó –°–∞–ª–∞—Ç', callback_data='salad')]
        ]

        reply_markup = InlineKeyboardMarkup(new_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            f'üîñ <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n\n'
            f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n',
            parse_mode='HTML',  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=reply_markup
        )

    elif query.data == 'discard_recipe':
        await query.edit_message_text(
            '‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.'
        )


async def handle_category_choice(update, context):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î.
    '''
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_info = user_data.get(user_id, {})

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = query.from_user.username
    first_name = query.from_user.first_name
    last_name = query.from_user.last_name
    created_at = datetime.now()

    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(
        f'User {first_name} {last_name} (username: {username}) '
        'confirmed changes.'
    )

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
    recipe_id = context.user_data.get('recipe_id')
    category = query.data  # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = query.data  # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    category_name = ''
    if category == 'breakfast':
        category_name = '–ó–∞–≤—Ç—Ä–∞–∫'
    elif category == 'main_course':
        category_name = '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ'
    elif category == 'salad':
        category_name = '–°–∞–ª–∞—Ç'

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    category_obj = add_category_if_not_exists(category_name)

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = category_obj.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö—é.
    # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    add_user_if_not_exists(
        user_id,
        username,
        first_name,
        last_name,
        created_at
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    title = user_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    recipe = user_info.get('recipe', '–ù–µ —É–∫–∞–∑–∞–Ω')
    ingredients = user_info.get('ingredients', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')

    logging.info('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_recipe = add_recipe(user_id, title, recipe, ingredients, category_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –∏–∑ user_data
    video_file_id = context.user_data.get('video_file_id')
    logging.info(f'video_file_id= {video_file_id}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤–∏–¥–µ–æ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if video_file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_video_to_recipe(new_recipe.id, video_file_id)

    await query.edit_message_text(
        f'‚úÖ –í–∞—à —Ä–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n'
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n{title}\n\n'
        f'üîñ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}',
        parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )


async def send_recipe_suggestions(update, context):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç—ã'. '''
    user_id = update.message.from_user.id
    recipes = get_user_recipes_by_category(user_id)

    if not recipes:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.')
        return

    keyboard = []
    for recipe in recipes:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        keyboard.append([InlineKeyboardButton(
            recipe.title,
            callback_data=f'recipe_{recipe.id}'
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:',
        reply_markup=reply_markup
    )


async def handle_recipe_choice(update, context):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ —Ä–µ—Ü–µ–ø—Ç–∞. '''
    query = update.callback_query
    await query.answer()

    recipe_id = int(query.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
    recipe = get_recipe(recipe_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ ID –∏–∑ –±–∞–∑—ã

    if not recipe:
        await query.edit_message_text('‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    # –ò—â–µ–º –≤–∏–¥–µ–æ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ —ç—Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
    video = recipe.video  # –°–≤—è–∑—å `relationship('Video', backref='recipe', uselist=False)`

    if video:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.reply_video(video.video_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ
    await query.message.reply_text(
        f'üçΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b> {recipe.title}\n\n'
        f'üìù <b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe.description}\n\n'
        f'ü•¶ <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{", ".join([ingredient.name for ingredient in recipe.ingredients])}',
        parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
async def suggest_recipe(update, context):
    user_id = update.message.from_user.id
    recipes = get_user_recipes(user_id)

    if not recipes:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    first_recipe = recipes[0]

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    keyboard = [
        [InlineKeyboardButton(f'–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å: {first_recipe.title}', callback_data=f'suggest_{first_recipe.id}')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
async def handle_suggested_recipe(update, context):
    query = update.callback_query
    await query.answer()

    recipe_id = int(query.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
    recipe = get_recipe(recipe_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –∏–∑ –±–∞–∑—ã –ø–æ ID

    if not recipe:
        await query.edit_message_text('‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ
    await query.edit_message_text(
        f'üçΩ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞**: {recipe.title}\n\n'
        f'üìù **–†–µ—Ü–µ–ø—Ç**:\n{recipe.description}\n\n'
        f'ü•¶ **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã**:\n{", ".join([ingredient.name for ingredient in recipe.ingredients])}'
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–∞–Ω–¥–ª–µ—Ä–æ–≤
def setup_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler('start', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
    app.add_handler(MessageHandler(
        filters.Regex(video_link_pattern) & filters.TEXT, handle_video_link
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ '–†–µ—Ü–µ–ø—Ç—ã', '–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ' –∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(
            '^(–†–µ—Ü–µ–ø—Ç—ã|–ó–∞–≥—Ä—É–∑–∏—Ç—å|–°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ)$'
        ),
        handle_button_click
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–ª—é–¥
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(
            '^(–ó–∞–≤—Ç—Ä–∞–∫|–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ|–°–∞–ª–∞—Ç|–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫|–°–ª—É—á–∞–π–Ω–æ–µ –≥–æ—Ä—è—á–µ–µ|–°–ª—É—á–∞–π–Ω—ã–π —Å–∞–ª–∞—Ç)$'
        ),
        handle_button_click_recipe
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(
        handle_confirm_changes,
        pattern='^(save_recipe|discard_recipe)$'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(
        handle_category_choice,
        pattern='^(breakfast|main_course|salad)$'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, send_recipe_suggestions
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    app.add_handler(CallbackQueryHandler(
        handle_recipe_choice, pattern='^recipe_'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, suggest_recipe
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    app.add_handler(CallbackQueryHandler(
        handle_suggested_recipe, pattern='^suggest_'
    ))
